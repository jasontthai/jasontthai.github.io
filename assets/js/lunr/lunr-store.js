var store = [{
        "title": "Recommended Browser Extensions",
        "excerpt":"    Here is a list of my recommended browser extensions that will make your browsing experience safer:        Privacy Badger -  Privacy Badger is a browser add-on that stops advertisers and other third-party trackers from secretly tracking where you go and what pages you look at on the web. Privacy Badger learns about trackers as you browse by inspecting external resources websites request. Please be aware that Google Analytics is considered first-party by Privacy Badger, which means that Google Analytics will not be blocked if you do not use another blocker, such as uBlock Origin.   uBlock Origin Firefox, Chrome - An efficient wide-spectrum-blocker that’s easy on memory, and yet can load and enforce thousands more filters than other popular blockers out there. It has no monetization strategy and is completely open source. We recommend Firefox but uBlock Origin also works in other browsers such as Safari, Opera, and Chromium. Unlike AdBlock Plus, uBlock does not allow so-called “acceptable ads”.   HTTPS Everywhere - A Firefox, Chrome, and Opera extension that encrypts your communications with many major websites, making your browsing more secure. A collaboration between The Tor Project and the Electronic Frontier Foundation.   If you are interested in protecting your privacy on the internet, I recommend checking out https://www.privacytools.io/ where there are a lot of useful tips in helping you do so.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/06/10/browser-extensions/",
        "teaser":null},{
        "title": "How to Create a Secure Password",
        "excerpt":"Updated 2019-06-14:     Mention Lesspass   Do you use the same password for most of your common sites? Is your password easy to remember or to guess? You may find the convenience in only having to remember one password but that significantly increases the chance of it being hacked, especially when various security breaches have happened lately.  If you find yourself doing this, it is important to take some time to change your passwords and make them more secure.   How do we find the balance of having secure passwords with the convenience of easy recalling? There is a perpetual search for this solution but here are some suggestions   Use a Long Password  Longer passwords are always harder to crack. Consider using a password that has at least 12 characters.   Avoid names, places, dictionary words   Make use of capitalizations, punctuations, numbers and spelling.   Here is password that apply all of these rules: mE8$pX1xF@x3uyC and some of its stats provided by Password Checker Online:      Never Reuse a Password (Use a Password Management Tool)  It is challenging to come up with a new password, let alone having to remember a complicated one like above but it is important to do this. Often we want to have more secure passwords and different ones for our sites, while staying away from remembering all of them.   A solution for this is to use password managers. There are a couple of options:      LastPass or 1Password - These are online tools that include browser extensions  to help you manage your passwords. They can auto generate passwords and store them on the clouds so you can access them on any devices. All you need to do is remember 1 master password (a secure one!) to access all the data stored in the tool. Enter your master password, and the password manager takes care of the rest.   Lesspass - Stateless password manager. You only need to provide the site, login, and the one master password of your choice and a password will be auto generated for you. You can also host this service yourself.   KeypassX - This has the same functionality as LastPass or 1Password but it is an offline tool. If you are serious about your security and don’t want other providers to keep your data, you can use this to manage your passwords.   Another extra thing you can do is to make use of both password managers and memorization. Memorize the passwords for your most common sites and use password managers for the rest.   Fun corner: common passwords     123456   123456789   password   admin   12345678   qwerty   1234567   111111   photoshop   123123   1234567890   000000   abc123   1234   adobe1   macromedia   azerty   iloveyou   aaaaaa   654321   (list was taken from https://www.noip.com/blog/2013/12/04/9-easy-ways-choose-safe-secure-password/)   Some other resources and references:     https://boingboing.net/2014/02/25/choosing-a-secure-password.html   https://open.buffer.com/creating-a-secure-password/  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/06/12/secure-your-passwords/",
        "teaser":null},{
        "title": "How to Create an Interactive Map With Mapbox and Leafletjs",
        "excerpt":"    Recently I created an interactive map page of all the places that I visited&lt;. This post provides an overview of how to create such interactive map.    Libraries  List of libraries that I used:     Mapbox - https://www.mapbox.com   Leafletjs - https://leafletjs.com   First thing we need to do is obtain an access token by signing up for Mapbox. Once you have the token, we are ready to build our first map.   Basic Map with Data Source  Add leafletjs by including these in the head of your HTML code:  &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.3.1/dist/leaflet.css\"   integrity=\"sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==\"   crossorigin=\"\"/&gt; &lt;script src=\"https://unpkg.com/leaflet@1.3.1/dist/leaflet.js\"   integrity=\"sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==\"   crossorigin=\"\"&gt;&lt;/script&gt;   Add a div tag to the body of HTML code:  &lt;div id='map' style=\"width:100%; height:100vh;\"&gt;&lt;/div&gt;   Render a map with some overlay. The overlay data are GeoJSON. We will use a sample data (custom.geo.js) as a demonstration.  &lt;script src=\"https://jtthai.com/assets/js/custom.geo.js\" type=\"text/javascript\"&gt;&lt;/script&gt; // load geojson data &lt;script type=\"text/javascript\"&gt;  var geojson = L.geoJson(countries).addTo(map); var map = L.map('map').setView([0, 0], 2); L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.webp?access_token={accessToken}', {   maxZoom: 18,   attribution: 'Map data &amp;copy; &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors, ' +     '&lt;a href=\"https://creativecommons.org/licenses/by-sa/2.0/\"&gt;CC-BY-SA&lt;/a&gt;, ' +     'Imagery © &lt;a href=\"https://www.mapbox.com/\"&gt;Mapbox&lt;/a&gt;',\t\t   id: 'mapbox.streets-basic',   accessToken: // Paste your mapbox access token here }).addTo(map); &lt;/script&gt;   Here is how it looks in action:  See the Pen Basic Map by Jason Thai (@zirius-the-reactor) on CodePen.        Custom Styling and Interaction  Define a style for our custom overlay with a random fillColor  function getRandomColor() {   var letters = '0123456789ABCDEF';   var color = '#';   for (var i = 0; i &lt; 6; i++) {     color += letters[Math.floor(Math.random() * 16)];   }   return color; }  function style(feature) {     return {         fillColor: getRandomColor(),         weight: 2,         opacity: 1,         color: 'white',         fillOpacity: 0.7     }; } var geojson = L.geoJson(countries, {style: style}).addTo(map);   Add interactions to our map by displaying the color of the areas when we click on them.  geojson.eachLayer(function (layer) {     layer.bindPopup('&lt;p style=\"color:' + layer.options.fillColor + '\"&gt;'  + layer.feature.properties.name +'&lt;/p&gt;'); });  Voila! Try clicking on the map and see the result! Now the map looks like this:  See the Pen Basic Map with Color by Jason Thai (@zirius-the-reactor) on CodePen.        Resources     https://leafletjs.com/examples.html   https://geojson-maps.ash.ms/   https://github.com/tmcw/awesome-geojson   Conclusion  Here we create a sample map with interactions using Mapbox and Leafletjs. I encourage everyone to try out and make new maps with your own twist. Looking forward to seeing what you make!  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/06/13/how-to-create-interactive-map-with-mapbox-and-leafletjs/",
        "teaser":null},{
        "title": "Thoughts on Being Multilingual",
        "excerpt":"With the recent news of Trump calling Crimea as part of Russa, I cannot help but think about how our languages and identities intertwine. I was born into a multilingual family. My parents were born in Vietnam but their parents were from China, which meant they grew up knowing both Chinese and Vietnamese. Not only that, since their ancestors were from a Chinese region where people speak a different dialect, they both know multiple Chinese dialects (Mandarin, Cantonese, and Hokkien). I was also born in Vietnam and grew up in an extended family where we exchanged words through either Vietnamese and Cantonese (Unfortunately I couldn’t pick up any other dialects from my parents). Later on,  I studied English and when I moved to the states, English also has become my daily language.   On the contrary of most people’s belief that Americans tend to only speak English, I have found out that most people that I talk to in the tech industry - albeit this is a bubble - are multilingual. Just on top of my head, the languages that my coworkers speak include English, Vietnamese, Mandarin, Cantonese, French, Portuguese, German, Polish, Russian, and various Indian languages. This creates an immense diversity of culture that makes the mono-cultural world seem stale.   I find it interesting that I can identify myself not just by the country of origin but the languages that I speak. It helps me understand and appreciate the cultural references and nuances of different cultures. I can enjoy artwork and pop cultures presented in their native language. Things like watching a movie, listening to a song, or reading a book. Even though there is a common theme in expressions, different cultures bring their own not so subtle interpretations. Surely things can be translated from one language to another, but being able to understand the work in its own language is a joy of its own.   Also being multilingual helps me have a sense of connection to family, people, and heritage. We use languages to stay in touch with our families, talking to friends, making acquaintances. The fact that I can speak a different language really brings my family closer together. It reminds me of where we have come from and how far we have come. It also helps me understand that to live in another country doesn’t mean I gave up my former identity,  and have a greater empathy for other people in the same situation.   Some suggest that multilinguals have multiple personalities and that we act differently when speaking in different languages. I find that very true. There are certain things that don’t exist in other languages, and this means different languages help me express myself better. My wife tells me that I am more passionate to her when speaking Vietnamese and that I sound smarter when I speak in English (Hence the reason this post was written in its language). I find myself more fragile, truer when speaking in Vietnamese and English helps me have a voice of reason.   I feel lucky to be multilingual as learning foreign languages is hard. It takes a long time to get familiar with a new language and I was fortunate enough that that process was integrated into my childhood. We take things for granted because we don’t have to go through the process of learning the language as a foreigner.  I appreciate people learning a new language as it takes a lot of effort and it shows their interest in other cultures.  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/06/16/thoughts-on-being-multilingual/",
        "teaser":null},{
        "title": "Dear Wife!",
        "excerpt":"Dear wife,   It has been a week since you were here. How are you adjusting to this part of the world? Has the jet lag been forgiving? It still feels surreal to me that we are finally together after so long. I asked myself if this is real or I am still dreaming. The simple thought of spending time with you doing the most minute thing has finally become true. Do you remember this picture?        I can’t help but think about this picture when we were preparing for dinner together earlier. That gave me the biggest smile now that I think about it again. It is kinda funny to me that we were talking about such a deep topic earlier too haha.   Sorry we haven’t been to a lot of cool and fun places. I hope it is not too boring for you and let’s go explore together.      Let’s enjoy all the lost time that we couldn’t share with each other and make new memories where there will be both you and I.   Thanks for being with me!  From husband   Image Source: puuung1  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/07/15/dear-wife/",
        "teaser":null},{
        "title": "My 10 Most Used Linux Commands",
        "excerpt":"The script to run to display the most used commands (copied from linux.byexamples.com):   history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl |  head -n10   2019-07-17:  Funny how it did not change much lol.       1    468  10.6971%    gst      2    452  10.3314%    ls      3    388  8.86857%    git      4    354  8.09143%    gd      5    240  5.48571%    bb      6    211  4.82286%    brazil      7    147  3.36%       ..      8    114  2.60571%    cd      9    111  2.53714%    ssh     10    85   1.94286%    gcam   2018-09-03:   Here is the output from my computer:       1\t1229  12.2912%   gst    (git status)      2\t1046  10.461%    gd     (git diff)      3\t691   6.91069%   git      4\t655   6.55066%   make      5\t640   6.40064%   gl     (git pull)      6\t429   4.29043%   gco    (git checkout)      7\t404   4.0404%    gcam   (git commit -am)      8\t284   2.84028%   ls       9\t244   2.44024%   st     (subl)     10\t203   2.0302%    http  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2018/09/03/10-most-used-linux-commands/",
        "teaser":null},{
        "title": "Things I've Learned Hosting a URL Shortener Service",
        "excerpt":"    TinyAlias is no longer in service but I am still hosting it on Heroku so you can try out its functionality.   Access the heroku app here: https://tinyalias.herokuapp.com (It may take sometimes to wake up since this service is now hosted for free).   You can also view the source code here: https://github.com/zirius/tinyalias   After hosting my own custom url shortener service TinyAlias for about 6 months, I learned a few things:   There are many available services on the internet. Some provide more functionalities than the others.   Most people use the service for spam and phishing purposes - Same link is shortened multiple times.   Determining if links are safe is hard - Most services are not able to provide such information.   Links are mostly distributed through emails - Most links are images embedded in emails.   A lot of users are robos - They can be configured to use the service in a programmatical way.    Links are auto rejected by various websites - They all have mechanisms to block the shortened links on their sites.     That said, a lot of companies use shortened links with their own vanity domains which feature thair brands to promote their service and that is a good use case for the service. Also it is great to send someone a short link rather than a very long one, which is the main purpose of these services.   ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/06/05/thoughts-on-url-shortener-service/",
        "teaser":null},{
        "title": "About Unit Tests",
        "excerpt":"Today while trying to deploy some of my codes, I ran into an issue such that the build kept failing. Turned out that some of my unit tests were failing. The unit tests did pass before, which is why all the builds until now have been successful. How come they failed today? Upon investigating more, it turns out there is a timestamp validation in the code which has been successfully validated until now but the unit test did not cover that case. I ended up deploying a hotfix to unblock the build.   For more context, my unit test was similar to this one (conceptually):  void sampleTest() {   // This test will pass until 2020-01-01 12:00:00   assertTrue(System.currentTimeMillis() &lt; 1577836800000L); }  As you can see, this test will run fine until it does not. For my specific test, the validation stopped working today. I learned a hard lesson today. As a code reviewer, it is important to not only look at codes but also the unit tests and see if they cover all the possible cases. Otherwise, we will have to spend a lot of time debugging issues like this.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/06/12/about-unit-tests/",
        "teaser":null},{
        "title": "Recommended Financial Tools",
        "excerpt":"    Here is a list of my recommended financial tools that will enhance your experience of managing your finance:   Tools      Vanguard - Financial advisor and brokerage. In my opinion this is the best broker in the market for its low expense ratio funds.   Wealthfront* - If you prefer a more DIFM (Do it for me) investment, Wealthfront offers some excellent options of auto investment. It also offers a cash account with high APY compared to other alternatives.   Robinhood* - Commission-free investing app. You can purchase stocks for zero fee using the app.   Personal Capital - It is a free tool to manage and keep track of your investiments. You can also track your transactions, networth, asset allocation, retirement analysis and more.   Mint - It is another alternative to Personal Capital. It does not offer as many features as PC but less is more. The UI looks cleaner in my opinion.   YNAB* - If you prefer a more DIY budgeting tools, I highly recommend YNAB. The site also features some workshop to guide you more about budgeting.   *These are affiliate links and should you chose to do business with them, this blog will earn a small commission.   Other Resources      Boglehead Wiki - Investing advice inspired by Mr. John Bogle   Total-return Investing - Yield investing vs total return investing.   The Simple Path to Wealth - This book provides a simple approach to investing.   The Millionaire Next Door - What’s a millionaire really like and how to become one.   Mad Fientist - FIRE podcast.   I hope these tools will also benefit you like they do for me. Managing finance is never easy but these tools hopefully will ease you into taking a more active role in doing it.  ","categories": ["Finance"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/06/13/financial-tools/",
        "teaser":null},{
        "title": "Regrowing My Succulents",
        "excerpt":"This is long overdue but today I decided to trim and regrow the succulents that my wife brought me. I admit I have not been taking good care of them lately and I promised my wife I would do a better job from now on. It took about an hour to replace the soil (the old one was actually kinda gross!) and trimming the succulents. I checked out a couple of websites to make sure I trimmed correctly but one never knows. I hope they can grow back to their beautiful selves.      Look how small and cute they are now.   This makes me wonder: why do we procrastinate and put off things so much. I thought about doing this a long time ago but never got to do it. I am glad I did it today. This was actually quite a self meditative activity as I was so focused on the task. I should not put things off so much anymore.   I have been thinking lately about how to grow myself and do something new. Perhaps taking care of plants can be one of them. Unfortunately I do not have a lot of space to grow plants. How do one improve oneself? A part of me also wants me to take it easy and not force myself to do too much. I need to find a better balance between forcing myself to do things and doing things out of interest.   If you read this and remember that you are supposed to do something but have not, I hope you will finish it today.  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/06/16/regrowing-my-succulents/",
        "teaser":null},{
        "title": "Your Life or Your Money",
        "excerpt":"A Collection of What I am keeping track of in the book Your Life or Your Money   Read more about it here   Questions to asked before spending:     Did I receive fullfilment, satisfaction, and value in proportion to life energy spent?   Is this expenditure of life energy in alignment with my values and life purpose?   How might this expenditure change if I didn’t have to work for money?   What would this expense look like in a just and compassionate world?   CHECKLIST: THINK BEFORE YOU SPEND     Don’t go shopping.   Live within your means.   Take care of what you have.   Wear it out.   Do it yourself.   Anticipate your needs.   Research value, quality, durability, multiple use, and price.   Buy it for less.   Meet your needs differently.   The 9 Steps  1. Making Peace with the Past     How much have you earned in your life? Find out your total lifetime earnings—the sum total of your gross income, from the first penny you ever earned to your most recent paycheck.   What have you got to show for it? Find out your net worth by creating a personal balance sheet of assets and liabilities—everything you own and everything you owe.   2. Being in the Present - Tracking Your Life Energy     How much are you trading your life energy for? Establish the actual costs in time and money required to maintain your job, and compute your real hourly wage.   Keep track of every cent that comes into or goes out of your life.   3. Where Is It All Going? (Monthly Tabulation)     Every month, total all expenses within categories generated by your own unique spending pattern. Then total income.   Convert dollars spent in each category to “hours of life energy,” using your real hourly wage as computed in step 2.   4. Three Questions That Will Transform Your Life     Did I receive fullfilment, satisfaction, and value in proportion to life energy spent?   Is this expenditure of life energy in alignment with my values and life purpose?   How might this expenditure change if I didn’t have to work for money?   (Optional) What would this expense look like in a just and compassionate world?   5. Making Life Energy Visible  Create a large Wall (or Online) Chart plotting the total monthly income and total monthly expenses from your Monthly Tabulation. Put it where you will see it every day.   6. Valuing Your Life Energy - Minimizing Spending  Learn and practice intelligent use of life energy (money), which will result in lowering your expenses and increasing your savings. This will create greater fulfillment, integrity, and alignment in your life.   7. Valuing Your Life Energy - Maximizing Income  Respect the life energy you are putting into your job. Money is simply something you trade your life energy for. Trade it with purpose and integrity for increased earnings.   8. Capital and the Crossover Point  Each month apply the following equation to your total accumulated capital, and post the montly independence income as a separate line on your Wall Chart:  capital x current long-term interest rate / 12 months = monthly investment income    9. Investing for FI  Set up financial plan using the three pillars:     Capital: The income-producing core of your Financial Independence   Cushion: Enough ready cash, earning bank interest, to cover six months of expenses   Cache: The surplus of funds resulting from your continued pracrice of the nine steps  ","categories": ["Finance"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/06/30/your-life-or-your-money/",
        "teaser":null},{
        "title": "So You Have Some Money",
        "excerpt":"    To San and Vy,   I know both of you do not like to talk about money. After all you are usually busy or have better things to do - Vy with your internship and thesis and San with your part time job and rotation. This is why I write this post so at least you have some place to read about it when you have the time. And I promise I will keep this short and easy to understand. After all, we do have to talk about this and it is better to do it now than later.     Upon working for a while, you may start noticing that your bank account is going up. YOU HAVE SOME MONEY. You may start wondering what you can do with that money. You may think about spending that money on a fancy meal, a pair of new shoes, or that beautiful dress that you had your eyes on for a while. You may have already spent a bit of your money on the things mentioned already. But then, growing up you are taught to be frugal and never spend all the money that you have so you want to save them. This is where I want to come in and offer some help.   Here are the first few INITIAL steps that you can do (There will be more):      If  you have not done it already, start setting up a budget and keep track of you expense and income. In order to know how much you can save, you need to know how much you are earning and spending. @San, Vy made one for you here   After you know how much you spend for a month, start saving up for an emergency fund (ideally 3 to 6 months of your monthly expense). This will be your safety net in case some emergency happens. This money will also be the foundation to show that you can save money and live below your mean.   If you have very high interest debt, start paying them. @San, you can think about paying for your tuition bit by bit now (depending on the interest, which I figure is high)   Here are some other next steps after the first 3 above:     Put your emergency fund into a high yield saving account to earn interest. (I can show you how to do this).   Start learning more about 401K, Traditional/Roth IRA (I will put up another post to go into details about this. For now, you can ignore)   You can also take a look at this flowchart and check out reddit’s personalfinance wiki to find out more about all things personal finance.   Why you need to do all this stuff? The answer is simple. This is to help you get started on being financially responsible and eventually finanical independent. You may wonder what the heck is financial independence. I promise it will be very fun to know about this and not boring at all even though it also revolves around money a bit. For now, enough money talk for the day. See it is not too long!  ","categories": ["Finance"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/15/so-you-have-some-money/",
        "teaser":null},{
        "title": "The Existence of Anniversaries",
        "excerpt":"    Definition of anniversary from Merriam-Webster:     1: The annual recurrence of a date marking a notable event   // a wedding anniversary   broadly : a date that follows such an event by a specified period of time measured in units other than years   // the 6-month anniversary of the accident       2: The celebration of an anniversary    How do you celebrate anniversaries? Do you go to a fancy restaurant or prepare an intimate meal at home? Either option is great. What is important is that you get to spend some quality time with your loved one to celebrate the special day that you guys experienced however long ago.  Sometimes though, for reasons, you guys cannot spend the time together on your special anniversary and that blows because you really want to. Well you are not alone. I and probably many other have experienced the same issue. You see, I could not spend many anniversaries with my best friend (and now wife) because we had a long distance relationships for many years. Did we ever let the fact that we could not spend much time together affect us? Yes, we did in multiple occasions. However, we always decided to stick together and ride through the storm that coexists with our relationship. So what should you? On the day where you are supposed to celebrate with each other but can’t, I’d say remember about the past, all the events that happened that made this day anniversary. You can send your loved one a text message, or in my case a blog post to remind your someone how much you care. And you can tell them that this anniversary, although lonely it can be, makes you forever more cherish the fact you guys are still in love with each other and that you wish this will be the last anniversary you guys are not each other. After all the person is very important to you. With that, I just want to say the existence of anniversaries, though can be quite superficial, is an important aspect of your life.     To my wife, I just want to say I love you and happy anniversary dear!  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/16/the-existence-of-anniversaries/",
        "teaser":null},{
        "title": "Changes I Made for My Blog's Theme",
        "excerpt":"    The stock theme that I am currently using is from https://github.com/jekyll/minima. I like it for its cleanliness and simplicty as the name implies.     But as you know I enjoy customizing things my way so I did make a few changes to make this blog a bit more to my liking (for now. After all I have switched themes a few times). Here are a couple of new additions that I added.   Added subscribe feature through email or RSS  I am currently trying out feedburner to handle subscription for the blog.   Use excerpt and introduce hover effects on the post.  If you visit my homepage, you will notice each post contains an excerpt and if you hover over the post, you’ll see a fading effect. The suggestion was made my the maintainer of Jekyll’s theme and I ended up implementing it.   You can see my PR here: https://github.com/jekyll/minima/pull/382   Added next and previous post link  IF you view a post, at the end of the post there is are hyperlinks to the next and previous posts to save you some clicks.   Added pagination and style each post as a card view.  Kudos to prashanthmadi.github.io for adding pagination and the card view that looks really nice.   You can see the changes to add pagination here and the card view here.   Below is the snippet of my homepage changes:   400: Invalid request    400: Invalid request    Added all posts page grouped by year-month  This is a nice way to view all the available posts on the same page. Here is the code to render this page:  400: Invalid request    ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/18/changes-i-made-for-my-blogs-theme/",
        "teaser":null},{
        "title": "Bài Tiếng Việt",
        "excerpt":"    Thiệt ra cái blog này đầu tiên chỉ định viết bằng tiếng Anh thôi nhưng mà càng viết thì tui lại càng muốn nó thành cái blog tạp hóa hơn. Mò từ hỗm rài tới giờ mới ra được một cách hơi ưng ý một tí để trình bày bài viết. Cái công cụ Jekyll này không giống như Wordpress (wp thì cái gì cũng làm sẵn cho mình). Này thì phải mày mò viết code nhiều hơn một tí. Mà tui thì lại không có giỏi trong việc chỉnh sửa CSS cho lắm.   Nhưng mà mò tới giờ thì thấy cũng đã tạm ổn, chỉ cần làm cho đường link xem post nhìn bắt mắt hơn tí là được. Ăn mừng để đánh dấu sự kiện blog đã hỗ trợ 2 ngôn ngữ thôi.    via GIPHY   À tiện thể đã ăn mừng thì xin cho tui giới thiệu luôn về Nắng Trong Bếp. Mọi người vào đây xem mấy bài viết đi tìm tuổi thơ của Vy và tui nha.  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/20/bai-tieng-viet/",
        "teaser":null},{
        "title": "How to Deploy to Github Pages Using CircleCI 2.0 + Custom Jekyll Dependencies",
        "excerpt":"    Since I have been playing with Github Pages to host my own website, I notice although there is a lot of automation out of the box to host the static website, Github only supports a few jekyll dependencies. This makes it restricting when you want to use a custom Jekyll gem or your own plugin. After doing a bit of research, I have figured out a way to also enable automatic deployment of your own site while also has the ability to use your own dependencies not supported yet by Github Pages. One of the ways is to use CircleCI for automatic build and deployment of your static site to your Github Pages repo.   Note: this tutorial assumes that you already know how to host your static site on Github Pages. Otherwise, you can check out some  guides available on Github.   CircleCI  CircleCI is a very  powerful continuous integration tool, which allows rapid builds and deployment of your projects.  Open source projects are supported and get free builds so as long as your static website is located on a public repository on Github, you won’t have to pay anything to use it. CircleCI also supports one job build for private project so you can also use it for your personal private project.   Deploy to Github Pages with CircleCI  The first step is to grant CircleCI access to your repo. This is done by adding a deploy key to allow read and write access so that CircleCI can read and push your changes. You can find out how to do it here   Next step is to configure the build and deployment step so CircleCI knows what to do  Create  .circleci/config.yml:   version: 2 jobs:   deploy:     docker:       - image: circleci/ruby:latest         environment:           USER_NAME: zirius           USER_EMAIL: thaixtri@gmail.com     steps:       - checkout       - run:           name: install dependencies           command: |             gem update --system             gem install bundler       - restore_cache:           keys:             - v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}             - v1-gem-cache-{{ arch }}-{{ .Branch }}-             - v1-gem-cache-{{ arch }}-       - run: bundle install --path=vendor/bundle &amp;&amp; bundle clean       - save_cache:           paths:             - vendor/bundle           key: v1-gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}        - run: JEKYLL_ENV=production bundle exec jekyll build       - run:           name: Test           command: bundle exec htmlproofer ./_site --check-html --disable-external --empty-alt-ignore       - deploy:           name: Deploy Release to GitHub           command: |             if [ $CIRCLE_BRANCH == 'source' ]; then               bash .circleci/deploy.sh             fi workflows:   version: 2   build:     jobs:       - deploy:           filters:             branches:               only:                  - source   The config.yml file declares the steps for CircleCI to execute, you can see that we are telling CircleCI to checkout the repo, update bundler, restore gems cache, run bundle install , save gems cache, build the static site by executing JEKYLL_ENV=production bundle exec jekyll build and finally if the code is pushed to source branch, the script deploy.sh is executed.   Create .circleci/deploy.sh:  git config user.name \"$USER_NAME\" git config user.email \"$USER_EMAIL\"  git checkout master git pull origin master  find . -maxdepth 1 ! -name '_site' ! -name '.git' ! -name '.gitignore' ! -name '.circleci' -exec rm -rf {} \\; mv _site/* . rm -R _site/  git add -fA git commit --allow-empty -m \"$(git log source -1 --pretty=%B)\" git push -f origin master  echo \"deployed successfully\"   Here we are telling CircleCI to checkout the master branch of the repo. For personal website, Github Pages uses master branch to render the site. By default, Github Pages will build the site and use the contents under _site directory to render the site. However, since we are using CircleCi to build the site, we just have to copy all the contents under _site that have already been built and put them in the root directory, that way Github Pages can render the contents.   After you have created these files, commit and push the changes to source branch. You will see a new build will start in CircleCI, which will execute all the steps mentioned above and put the new changes of your site on master branch. You may see something similar to this on CircleCI:      Once it’s done, your changes will be available for viewing.   Added benefit: Custom Jekyll Dependencies + Plugins  As I mentioned, if we let Github Pages handle the build of our site, only a limited number of dependencies and plugins are supported. However, now we have switched to CircleCI and build the site ourselves, this comes with an additional benefit which is all the Jekyll dependencies and plugins are now supported. Some of you may be aware that jekyll-paginate-v2 is not yet supported by Github Pages, but now you can take advantage of the new additional features of this dependency.   Addendum  If you decided to create a separate repo to store your source code and want to use CircleCI to push the generated static site to your Github Pages repo, you can replace the .circleci/deploy.sh above with the following content:  git config --global user.name \"$USER_NAME\" git config --global user.email \"$USER_EMAIL\"  export COMMIT_MESSAGE=\\\"$(git log --format=oneline -1 --pretty=format:'%h - %B')\\\"  echo $COMMIT_MESSAGE  git clone $GITHUB_PAGE_REPOSITORY_URL destination cd destination  git checkout master git pull origin master  find . -maxdepth 1 ! -name '_site' ! -name '.git' ! -name '.gitignore' -exec rm -rf {} \\; mv ../_site/* .  git add -fA git commit --allow-empty -m \"$COMMIT_MESSAGE\" git push -f origin master  echo \"Deployed successfully\"   In your repo setting on CircleCI, add a new environment variable GITHUB_PAGE_REPOSITORY_URL which is your Github Pages repo URL.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/22/how-to-deploy-a-github-page-using-circleci-20-custom-jekyll-gems/",
        "teaser":null},{
        "title": "How to Deploy to Github Pages Using Travis CI",
        "excerpt":"    Follow up for my post How to Deploy to Github Pages Using CircleCI 2.0 + Custom Jekyll Dependencies. This is a guide to set up automatic build and deployment using Travis CI as opposed to CircleCI     Travis CI  Travis CI is also very  powerful continuous integration tool, which allows rapid builds and deployment of your projects.  Open source projects are supported and get free builds so as long as your static website is located on a public repository on Github, you won’t have to pay anything to use it.   Deploy to Github Pages with Travis CI  The first step is to grant Travis CI access to your repo. This is done by adding a personal access key to allow read and write access so that Travis CI can read and push your changes. You can find out how to do it here. In your Travis repo setting, set an environment variable GITHUB_TOKEN with the token value you’ve just created.   Next step is to configure the build and deployment step so Travis CI knows what to do  Create  .travis.yml:   language: ruby cache: bundler branches:   only:   - source script:   - JEKYLL_ENV=production bundle exec jekyll build --destination site deploy:   provider: pages   skip-cleanup: true   local-dir: ./site   target-branch: master   email: deploy@travis-ci.org   name: Deployment Bot   github-token: $GITHUB_TOKEN   keep-history: true   on:     branch: source   The .travis.yml file declares the steps for Travis CI to execute, you can see that we are telling Travis CI to build the site using the source code from branch source and deploy the changes on branch master. Configuring on Travis CI is a little simpler than CircleCI as the tool takes care of caching the dependencies under the hood.   After you have created these files, commit and push the changes to source branch. You will see a new build will start in Travis CI, which will execute all the steps mentioned above and put the new changes of your site on master branch. You may see something similar to this on Travis CI:      Once it’s done, your changes will be available for viewing.   For other configurations, you can also check out Travis CI’s guide here   Conclusion  I hope this guide is also useful in helping you set up automatic build and deployment of your personal site on Github Pages. Using CI tools definitely helps free you from the limitation and restriction of Github Pages.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/23/how-to-deploy-to-github-pages-using-travisci/",
        "teaser":null},{
        "title": "Useful Commands for PostgreSQL and MySQL Database",
        "excerpt":"    A consolidated list of useful commands for PostgreSQL and MySQL from my own findings.     Prereqs  Homebrew   PostgreSQL   Installation  brew install postgresql   Connect through CLI:  PGPASSWORD=XXX psql -h HOST -p PORT -d DATABASE -u USERNAME   Show tables  \\d   Describe tables  \\d TABLENAME   Show biggest tables and their sizes  SELECT nspname || '.' || relname AS \"relation\",   pg_size_pretty(pg_total_relation_size(C.oid)) AS \"total_size\" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN ('pg_catalog', 'information_schema')   AND C.relkind &lt;&gt; 'i'   AND nspname !~ '^pg_toast' ORDER BY pg_total_relation_size(C.oid) DESC LIMIT 20;   Export to CSV with header  \\copy TABLENAME TO FILENAME.csv' DELIMITER ',' CSV HEADER;     MySQL   Installation  brew install mysql   Connect through CLI:  mysql -h HOST -P PORT -D DATABASE -u USERNAME -pPASSWORD    Show tables  SHOW tables;   Describe tables  DESCRIBE TABLENAME   Show biggest tables and their sizes  SELECT    table_schema as `Database`,    table_name AS `Table`,    round(((data_length + index_length) / 1024 / 1024), 2) `Size in MB`  FROM information_schema.TABLES  ORDER BY (data_length + index_length) DESC LIMIT 20;   Export to CSV with header  SELECT * FROM TABLENAME INTO OUTFILE 'FILENAME.csv' FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\n';  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/24/useful-commands-for-postgresql-mysql/",
        "teaser":null},{
        "title": "TinyAlias URL Shortener Design and Its Features",
        "excerpt":"  After I wrote some of my thoughts about my URL shortener service TinayAlias and others here in Things I’ve Learned Hosting a URL Shortener Service. It occured to me I did not mention much about what my service had to offer. Even though TinyAlias is no longer operational, I feel the service did provide some interesting features compared to others. This post will lay out its design and highlight a few interesting things with respect to both backend and front end implementations.     Screenshots       1 / 5        2 / 5        3 / 5        4 / 5        5 / 5        &#10094; &#10095;                    Design      Workflow      The Main app handles the main logic of creating shortened URL and its metadata, user authentication, and other blocking operations.   The Worker service receives a job from the job queue and executes tasks such as parsing request’s geolocation, detecting spam, expiring URL, and other non-blocking operations.   The Scheduler service runs as a cron to delegate jobs to the worker service.   Repo  https://github.com/zirius/tinyalias   Features   Some function and feature highlights   User authentication   I added a user authentication flow that let you sign up, sign in, reset your password. Building this from scratch is quite fun. Sessions are Cookie-based and passwords are encrypted by bcrypt and stored in DB.   Password protected links and link expiration  Link passwords are encrypted securely and stored in DB. Scheduler service periodically sends expiration job to worker service to detect if any links have expired and marked them as invalid.   Spam detection flow  This is one of the more interesting backend features I added. Whenever a URL is shortened, the main app will dispatch a spam detection job to the worker service. Worker service then calls Google safebrowsing API to detect if a URL is safe and update that URL status. The scheduler also periodically dispatch spam detection jobs to recheck existing URLs.   Analytics  Whenever a link is clicked, the service will parse the location based on the user’s IP address. This is then aggregated to show where the links are accessed geographically.   Mindful mode  This is a fun feature that I added that makes the user wait for a few seconds before redirecting them to the original URL. The page also displays some quotes of the day provided by https://favqs.com   News  I also added a page to allow users to view trending news and get the shortened URL within the app. News is provided by News API.     Conclusion  Designing and implementing TinyAlias from scratch is a fun side project for me.   ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/25/tinyalias-url-shortener-design-and-features/",
        "teaser":null},{
        "title": "Customize Part of Your Life with IFTTT",
        "excerpt":"    I have been using IFTTT to automate a part of my life and I figure it is useful not just to me but to others as well. This post lists some of the useful applets I use to improve my day to day activities.   What is IFTTT?  From IFTTT:     IFTTT is the free way to do more with hundreds of the apps and devices you love, including Twitter, Dropbox, Evernote, Nest, Fitbit, Amazon Alexa, and Google Assistant.     On IFTTT, we call those services. To see all of the services on IFTTT, check out our services list. We bring services together into Applets. Applets are specific things that can happen when you connect services — things your apps can’t do on their own.     For example, you could use an Applet to sync Amazon Alexa to-dos with your Google Calendar. Or one that lets you create events in your iPhone Calendar, via Google Assistant.    Essentially you can connect service A and service B to produce some events or activities C configured in an applet.   How does IFTTT work?  From IFTTT     IFTTT helps you connect all of your different apps and devices. When you sign up for a free account, you can turn on Applets that help your apps and devices work together to do specific things they couldn’t do otherwise. For example, you can back up your Instagram photos to Dropbox, have your lights turn on when you enter your home, or automatically remind a Slack channel about a meeting. There are millions of Applets to explore.     Here’s how it works:          Create a free account.     Browse the IFTTT website or app to find an Applet that interests you.     Click into the Applet and turn it on.     Connect the services that are involved in the Applet — this is only so we can use them to run Applets on your behalf. IFTTT provides a layer between different services to only allow them to do what you specifically tell them to do.     Find more Applets, and repeat!      I usually download the mobile app to set up and configure the applets. They are available on both Android and iOS   Some Applets I use     Get weather forecast at 7 AM   Get rain alert   Receive new AWS announcements through RSS feed - AWS news feed   Capture Ring security camera photo if motion is detected   Those are just a few that I am using. There are definitely a lot of useful integrations available on IFTTT. I highly recommend you check it out. You can also build your own integration and customize them to fit with your activities.   Conclusion  I think IFTTT is a very powerful service that is useful to almost everyone. From various existing integrations to new ones that you can build, I am sure you will benefit from the service. Give it a try!  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/26/customize-part-of-your-life-with-ifttt/",
        "teaser":null},{
        "title": "My Blog's PageSpeed Insights Score",
        "excerpt":"    Introduction   I have been testing how responsive my blog is and PageSpeed Insights give me a pretty good idea of the result. Certainly there are always improvements to be made but for now I am quite glad that the site is snappy.    Check my blog’s PageSpeed Insights Score   I also tried out Lighthouse, an open source tool to audit my site’s performance. The result is here in json or you can download the file and use Lighthouse Report Viewer for the graphical view.   Some other tools to test your site are Pingdom and GTmetrix   Things I have done to improve speed   Leverage Cloudflare for its SSL and CDN service  Cloudflare CDN ensures that my site is highly available and fast. Its SSL service also ensures your connection to my site is secure.   Load scripts asynchronously  Since scripts by default will block the rendering of the page, I use async attribute to have them loaded asynchronously.   Less use of style and scripts  The more scripts and styles a page has, the slower it becomes. I try not to overload the site with these things.   I also include CSS and javascripts directly on the page if they are small to reduce HTTP calls to fetch them.   Lazyload images and webp format  I optimize the images by converting them to webp format and using lazyloading  so they take less time to load and render.   Conclusion  To be clear, I do not think having a high score means the website is awesome. It also has to do with other factors like quality of content. That said, user experience is very important and we should not make the users wait to view our content.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/26/my-blog-pagespeed-insights-score-jasonthai-me/",
        "teaser":null},{
        "title": "Apply Different Styles to Mobile vs Web View Using @media",
        "excerpt":"This note goes over how I render the mobile and web view of my site differently to optimize user experience on different screen sizes with the use of @media  queries.  First let’s examine how it looks on web vs mobile:   Web View:  This view is designed to be viewed on devices with larger screen like laptops or desktops and it includes more information such as the cover image and description of the post.      Mobile View:  The view on mobile is optimized a lot more for information browsing. The image and description are eliminated in favor of more number of articles in the view. This makes viewing on mobile devices faster too since the browser does not have to load any images.      How to: using @media  Using @media query, we can define specific css behavior depending on certain width or height of the screen. You can learn more about it here   For example, the following query will apply to device with screen width up to 480px  @media screen and (max-width: 480px) {   // define css here }   For my specific site, this is what I define:  @media screen and (max-width: 600px) {   .bg-img {     display: none;   // hiding the cover image   }    .excerpt p {     display: none;  // hiding the description   } }   Conclusion  Using @media is a simple way to apply specific styles to different media/screens. I believe there are other ways to do it too such as grid or flex view. I am going to take a look at those a different time.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/27/apply-different-styles-to-mobile-vs-web-view-using-media/",
        "teaser":null},{
        "title": "42nd Biofreeze SF Marathon - 1st Half",
        "excerpt":"I finally ran my first half marathon today 07-28-19 in The 42nd Biofreeze SF Marathon. This has been one of my goals of the year. Suffice to say it has been one of the best day of my life so far. Here is the result of my race:      Race Report:   The race started at 6:46 AM at Mission Street and The Embarcadero San Francisco As soon as I started running, the adrenaline kicked in and I felt I could run faster than normal. However I still tried to keep a pace around 9 minutes / mile.  There were around 6 water stops along the race and I stopped by all of them and refueled with eletrolyte water. The first uphill around half of the race was longer and higher than expected so I was conservative in my pace and slowed down to about 13:30 minutes / mile. Following that was a long downhill which helped me recover my pace, however that had a bad affect on my ankle. Later on, I had to stop by the medic to apply some pain relief gel. This is a surprise to me as the water does provide instant energy and I felt I could run fast again right after drinking. Also I did not have to drink as much as usual. My legs start hurting quite a lot at around 10 mile in, which meant stopping by the medic again for the gel. They seemed to have instant effect but wore off quickly.  I think I could have pushed myself harder in the last 2 miles of the race. In stead I kept conserving energy and when I finished, I didn’t feel as tired as my practice run that I did a few weeks ago.   Some other stats about my training journey:     Training duration: 8 weeks   Number of running hours: 24   Number of miles: 145   From not being able to run much from February this year, it has been a good journey so far. Ever since I found out about Strava, it has been the source of motivation to get me running. There are a lot of runners out there and seeing how they push themselves everyday to run harder and faster is truly wonderful. I am glad to join the running club and hoping to continue for a long time. Also thank you to my friend Tri Hoang for pushing me, it is good to have a running buddy.   If you want to get started in running, I suggest checking out Couch 2 5K Program. This will help guide you along the way from not running to your first 5K. Get out there and start running!  ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/07/28/42nd-biofreeze-sf-marathon-1st-half/",
        "teaser":null},{
        "title": "What I'm up to in July 2019",
        "excerpt":"    First post of what I am hoping will be a series. Here I will update what has been happening with me in the month.     July has not been kind for Vy. She was sick for almost two weeks. This month was also our anniversary month. What a bummer! The good news is Vy is welcoming August with good health.   I finally paid off my car loan! Some more stats:     Loan date: July 2014 to July 2019   Total amount: $2,000 (down payment) + $28,168.33 (0% finance) = $30,168.33   Current value: $12,831.00   Depreciation %: 57.47%   My reading list heavily focused on personal finance this month. I got a lot of motivations to write a few of my posts based on these books. They are certainly good reads (pun-intended) so I recommend it to everyone.             Jason&#39;s bookshelf: july-2019                                                 The Simple Path to Wealth: Your road map to financial independence and a rich, free life                 by J.L. Collins                 tagged:       july-2019                                                     The Millionaire Next Door: The Surprising Secrets of America's Wealthy                 by Thomas J. Stanley                 tagged:       july-2019                                                     Your Money or Your Life                 by Vicki Robin                 tagged:       july-2019            Share book reviews and ratings with Jason, and even join a book club on Goodreads.           I also ran my first half marathon. You can view more detail about it in this post   ","categories": ["Blog"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/08/02/what-im-up-to-in-july-2019/",
        "teaser":null},{
        "title": "Three Proofs Total Stock Market is Efficient",
        "excerpt":"John Norstad, a retired mathematician, had presented three proofs that prove Total Stock Market (fund) is efficient. This is interesting so this note shares with you those three proofs.    You can read about the proofs here and  join the bogleheads forum to discuss about the proofs here   I have recently switched to mostly investing in Vanguard Total Stock Market Index Fund (VTSAX) so this study gives me some assurance that this is the right approach. Of course, stock market is volatile and risky, so imo, this only plays out if there is a long time horizon for investing.   If you are wondering about the asset allocation that I am following, here is the breakdown:         401K: 100% Vanguard Target Retirement 2055 Fund (VFFVX)   Roth IRA:  100% VTSAX   Rollover IRA:  100% VTSAX   Taxable Account:  100% VTSAX   This portfolio seems to fit nicely with the approach of lazy investing as I do not have to worry about buying individual stocks and doing the due diligence to research about individual companies. You may argue stock picking can result in better investment over time but I think simplicity is the key to investing.     Checkout some of my other finance’s notes  ","categories": ["Finance"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/08/04/three-proofs-total-stock-market-is-efficient/",
        "teaser":null},{
        "title": "Enable Offline Support to Websites with Workbox",
        "excerpt":"    Recently I have added offline support for this blog using Workbox. You can test this by going offline and then browsing my blog. This note gives a walkthrough of how I did it and summarizes my findings.    TLDR  Steps to enable offline support:     Enable service worker   Create sw.js with     importScripts('https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js'); workbox.precaching.precacheAndRoute([]);           Install workbox-cli with npm install workbox-cli --global   Follow workbox wizard workbox wizard --injectManifest   Inject sw.js with what to cache workbox injectManifest workbox-config.js   What is Workbox?  Workbox is a set of javascript libraries that add support for caching and offline access of web apps. Workbox provides an abstract layer for developers when working with service workers. Some of the things workbox support like precaching, runtime caching, etc will be covered below.   Does your browser support workbox and service workers? Check here   Enable service worker  Add this script to the bottom of your website:  &lt;script&gt; // Check that service workers are supported if ('serviceWorker' in navigator) {   // Use the window load event to keep the page load performant   window.addEventListener('load', () =&gt; {     navigator.serviceWorker.register('/sw.js');   }); } &lt;/script&gt;  This tells the browser to wait until the window load and then register for service worker  in /sw.js route.   Using Workbox  There are a few ways to generate service workers using Workbox. I choose to use workbox-cli as I can enable it as part of my build pipeline for my blog which is currently powered by Jekyll. If you use Node or Gulp, you can use workbox-build or if you use Webpack, there is workbox-webpack-plugin.   Install workbox-cli  Install by using npm:   npm install workbox-cli --global   Setup service worker  In sw.js specify the following boilerplate code:  importScripts('https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js'); workbox.precaching.precacheAndRoute([])   Notice we have not specified anything yet to precache. This serves as an injection point for workbox to compute and inject all the routes to be cached.   Use workbox-cli to populate what to precache  Run workbox-cli wizard   workbox wizard --injectManifest  This command provides the option to specify what to cache by looking at all the file extensions in the website. After this is done, a new file called workbox-config.js will be created.   workbox injectManifest workbox-config.js  This command then uses what is specified in workbox-config.js and injects all the files to be cached into the injection point we specified above in sw.js files.   Manually specify what to cache during runtime  There are already a few common recipes that provide examples of caching css, js, images, etc.   I use a few from those recipes for my site:  // Caching Images workbox.routing.registerRoute(   /\\.(?:png|gif|jpg|jpeg|webp|svg)$/,   new workbox.strategies.CacheFirst({     cacheName: 'images',     plugins: [       new workbox.expiration.Plugin({         maxEntries: 60,         maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days       }),     ],   }) );  // Cache CSS and JavaScript Files workbox.routing.registerRoute(   /\\.(?:js|css)$/,   new workbox.strategies.StaleWhileRevalidate({     cacheName: 'static-resources',   }) );  // Caching Content from Multiple Origins workbox.routing.registerRoute(   /.*(?:googleapis|gstatic)\\.com/,   new workbox.strategies.StaleWhileRevalidate(), );   Add to build and automate  Since I am using CircleCI to deploy changes of my site to Github Pages, I also add the workbox + service worker script generation to the build.   Declared workbox-config.js:  module.exports = {   \"globDirectory\": \"_site/\",   \"globPatterns\": [     \"**/*.{html,txt,css,webp,js,json,svg,ico}\"   ],   \"swDest\": \"_site/sw.js\",   \"swSrc\": \"sw.js\" };   In config.yml file I added:         # -- more omitted --       - run: JEKYLL_ENV=production bundle exec jekyll build       - run: npm install workbox-cli       - run: npx workbox injectManifest workbox-config.js       # -- more omitted --   It is quite simple, just added two extra steps to install workbox-cli and run the same command to inject the precache routes.   Considerations     Using the workbox-cli, we can cache everything on the site. However, this will not work if the website contains thousands of posts and images as everything will be downloaded to the browser cache.   Using the workbox-cli, we can only set service workers to cache our website’s assets. It will not handle caching other website’s sites. This is important because we probably use things like external fonts, javascripts, css files, etc. So we need to manually add that support to our service workers.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/08/06/enable-offline-support-to-websites-with-workbox/",
        "teaser":null},{
        "title": "I Turned My Blog into a Progressive Web App",
        "excerpt":"I recently create a post of how to enable offline support to websites with Workbox and turns out it already covers half of the work of turning my blog into a progressive web app (PWA). This note will cover the rest to fully convert a regular website to a PWA.    The first thing is to check what is needed to be done in order to be a PWA. We can do that by using Google Chrome’s developer tools’ audit.      Give it a run, and see who well your website is doing.   Now let’s dive in the steps to turn my blog to a PWA.   Prerequisites:  Make sure have completed registering the worker service. Details are covered in the post I mentioned above.   Create manifest.json  The Web App Manifest is a JSON file designed to describe a Web Application. Below is what I declared for my site:  {   \"short_name\": \"Jason's Notes\",   \"name\": \"Jason's Notes\",   \"icons\": [     {       \"src\": \"/assets/img/android-chrome-192x192.png\",       \"type\": \"image/png\",       \"sizes\": \"192x192\"     },     {       \"src\": \"/assets/img/android-chrome-512x512.png\",       \"type\": \"image/png\",       \"sizes\": \"512x512\"     }   ],   \"start_url\": \"index.html\",   \"background_color\": \"#fdfdfd\",   \"display\": \"standalone\",   \"scope\": \"/\",   \"theme_color\": \"#faf5ef\" }  Above are the minimum fields you should declare for your manifest. Make sure you fill all of them.   Add meta tags:  I also added the required meta tags for a PWA:  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;link rel=\"manifest\" href=\"/manifest.json\"&gt; &lt;link rel=\"apple-touch-icon\" href=\"/assets/img/apple-touch-icon.png\"&gt; &lt;meta name=\"theme-color\" content=\"#faf5ef\" /&gt;   Verify through Audits  If you have completed all the above steps, verify using the audits tool again and hopefully you’ll be greeted with this screen:      More ways to verify     If you open the menu on chrome browser, you’ll see the option to install your pwa as an app on your desktop.   View the site on browser and you can be asked to add this site as an app.   Conclusion  Using PWA, we ensure our site is viewable no matter what network condition is. I hope you’ll be able to turn your site to a PWA to improve your visitors’ experience.  ","categories": ["Tech"],
        "tags": [],
        "url": "https://jasonthai.me/blog/2019/08/07/i-turned-my-blog-into-a-web-progress-app/",
        "teaser":null}]
