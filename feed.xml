<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://jasonthai.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jasonthai.me/" rel="alternate" type="text/html" /><updated>2020-07-25T17:59:55+00:00</updated><id>https://jasonthai.me/feed.xml</id><title type="html">Jason’s Notes</title><subtitle>Jason Thai's personal page</subtitle><author><name>Jason Thai</name></author><entry><title type="html">Set Up Nginx + Varnish for High Traffic Websites</title><link href="https://jasonthai.me/blog/2020/07/24/set-up-nginx-varnish-for-high-traffic-websites/" rel="alternate" type="text/html" title="Set Up Nginx + Varnish for High Traffic Websites" /><published>2020-07-24T00:00:00+00:00</published><updated>2020-07-24T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/07/24/set-up-nginx-varnish-for-high-traffic-websites</id><content type="html" xml:base="https://jasonthai.me/blog/2020/07/24/set-up-nginx-varnish-for-high-traffic-websites/">&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/NginxVarnish.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/NginxVarnish.png&quot; alt=&quot;Nginx + Varnish&quot; /&gt;
&lt;/picture&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server
&lt;a href=&quot;https://nginx.org&quot;&gt;https://nginx.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents. Varnish Cache is really, really fast. It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture.
&lt;a href=&quot;https://varnish-cache.org&quot;&gt;https://varnish-cache.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This guide will go over how to utilize the two components to power a high traffic website. We will take &lt;a href=&quot;https://jasonthai.me&quot;&gt;https://jasonthai.me&lt;/a&gt; as an the website we want to set up for high traffic caching.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;Install nginx and varnish:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;varnish nginx &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the ports used by nginx and varnish:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-tulpn&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nginx
tcp        0      0 0.0.0.0:80          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       LISTEN      764635/nginx: maste
tcp        0      0 0.0.0.0:443         0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       LISTEN      764635/nginx: maste
tcp6       0      0 :::80               :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;            LISTEN      764635/nginx: maste
tcp6       0      0 :::443              :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;            LISTEN      764635/nginx: maste

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-tulpn&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;varnish
tcp        0      0 0.0.0.0:6081        0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       LISTEN      715/varnishd
tcp        0      0 127.0.0.1:6082      0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       LISTEN      715/varnishd
tcp6       0      0 :::6081             :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;            LISTEN      715/varnishd
tcp6       0      0 ::1:6082            :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;            LISTEN      715/varnishd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, varnish will be configured to talk to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; as its default backend. Verify by checking &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/varnish/default.vcl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/varnish/default.vcl
...
backend default &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    .host &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    .port &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-nginx&quot;&gt;Configure Nginx&lt;/h1&gt;
&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/your-website.com.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name your-website.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    server_name your-website.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ssl_certificate /etc/letsencrypt/live/your-website.com/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ssl_certificate_key /etc/letsencrypt/live/your-website.com/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    ssl_protocols TLSv1.2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ssl_prefer_server_ciphers   on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    add_header Strict-Transport-Security &lt;span class=&quot;s2&quot;&gt;&quot;max-age=31536000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    add_header X-Content-Type-Options nosniff&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    add_header X-Frame-Options &lt;span class=&quot;s2&quot;&gt;&quot;SAMEORIGIN&quot;&lt;/span&gt; always&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    add_header Referrer-Policy &lt;span class=&quot;s2&quot;&gt;&quot;strict-origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    add_header X-XSS-Protection &lt;span class=&quot;s2&quot;&gt;&quot; 1; mode=block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      proxy_pass http://127.0.0.1:6081&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header X-Forwarded-Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header X-Forwarded-Proto https&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      proxy_set_header HTTPS &lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      access_log /var/log/nginx/your-website-access.log&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      error_log  /var/log/nginx/your-website-error.log notice&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:8080
    server_name your-website.com
    root /var/www/website&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    index index.html index.htm index.php
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Explanation of the above configuration:
We created 3 server blocks that listen to port 80, 443 and 8080 respectively:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The first block redirect HTTP traffic to our HTTPS backend&lt;/li&gt;
  &lt;li&gt;The second block direct HTTPS traffic to our Varnish cache which is listening on port &lt;code class=&quot;highlighter-rouge&quot;&gt;6081&lt;/code&gt;. This is also known as reverse proxy where we are directing traffic from port 443 to port 6081. We also added a few headers to increase security. Note: in order to use port 443, you should have configured SSL/TLS. The above configuration assumes you have set one up using letsencrypt.&lt;/li&gt;
  &lt;li&gt;The third block listens on port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt;, which is called by Varnish to look up and cache our website’s contents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enable our website configuration:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/nginx/sites-available/your-website.com.conf /etc/nginx/sites-enabled/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart nginx and varnish:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart varnish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;
&lt;h2 id=&quot;cache-test&quot;&gt;Cache Test&lt;/h2&gt;
&lt;p&gt;Use curl to test whether varnish is active:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; https://your-website.com
HTTP/1.1 200 OK
Server: nginx/1.18.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Date: Sat, 25 Jul 2020 17:41:01 GMT
Content-Type: text/html
Content-Length: 24349
Connection: keep-alive
Last-Modified: Sun, 19 Jul 2020 17:07:26 GMT
Vary: Accept-Encoding
X-Varnish: 184865969 184770543
Age: 6878
Via: 1.1 varnish &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Varnish/6.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ETag: W/&lt;span class=&quot;s2&quot;&gt;&quot;5f1d-5aace6ca3b1d1-gzip&quot;&lt;/span&gt;
Accept-Ranges: bytes
Strict-Transport-Security: max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;31536000
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
Referrer-Policy: strict-origin
X-XSS-Protection:  1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the following headers:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;X-Varnish: 184865969 184770543
Age: 6878
Via: 1.1 varnish &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Varnish/6.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It shows the website is being returned by Varnish cache.&lt;/p&gt;

&lt;h2 id=&quot;load-test&quot;&gt;Load Test&lt;/h2&gt;
&lt;p&gt;The result of a load test with 2000 concurrent users on &lt;a href=&quot;https://jasonthai.me&quot;&gt;https://jasonthai.me&lt;/a&gt; can be found at &lt;a href=&quot;https://bit.ly/3jyxAeq&quot;&gt;https://bit.ly/3jyxAeq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Result of 1000 concurrent clients:&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/1000-concurrent.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/1000-concurrent.png&quot; alt=&quot;1000 concurrent users&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;Result of 2000 concurrent clients:&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/2000-concurrent.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/2000-concurrent.png&quot; alt=&quot;2000 concurrent users&quot; /&gt;
&lt;/picture&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h1&gt;
&lt;p&gt;Varnish supports multiple configurations including cache purging, cache skipping and TTL for cached contents. More resources can be found on their website.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://varnish-cache.org/docs/index.html&quot;&gt;https://varnish-cache.org/docs/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linode.com/docs/websites/varnish/getting-started-with-varnish-cache&quot;&gt;https://www.linode.com/docs/websites/varnish/getting-started-with-varnish-cache&lt;/a&gt;&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Introduction nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server https://nginx.org Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents. Varnish Cache is really, really fast. It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture. https://varnish-cache.org This guide will go over how to utilize the two components to power a high traffic website. We will take https://jasonthai.me as an the website we want to set up for high traffic caching. Prerequisites Install nginx and varnish: $ sudo apt update $ sudo apt install varnish nginx -y Check the ports used by nginx and varnish: $ sudo netstat -tulpn | grep nginx tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 764635/nginx: maste tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 764635/nginx: maste tcp6 0 0 :::80 :::* LISTEN 764635/nginx: maste tcp6 0 0 :::443 :::* LISTEN 764635/nginx: maste $ sudo netstat -tulpn | grep varnish tcp 0 0 0.0.0.0:6081 0.0.0.0:* LISTEN 715/varnishd tcp 0 0 127.0.0.1:6082 0.0.0.0:* LISTEN 715/varnishd tcp6 0 0 :::6081 :::* LISTEN 715/varnishd tcp6 0 0 ::1:6082 :::* LISTEN 715/varnishd By default, varnish will be configured to talk to port 8080 as its default backend. Verify by checking /etc/varnish/default.vcl: $ cat /etc/varnish/default.vcl ... backend default { .host = &quot;127.0.0.1&quot;; .port = &quot;8080&quot;; } ... Configure Nginx Create /etc/nginx/sites-available/your-website.com.conf and add the following: server { listen 80; listen [::]:80; server_name your-website.com; return 301 https://$host$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name your-website.com; ssl on; ssl_certificate /etc/letsencrypt/live/your-website.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your-website.com/privkey.pem; ssl_protocols TLSv1.2; ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS; ssl_prefer_server_ciphers on; add_header Strict-Transport-Security &quot;max-age=31536000&quot;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options &quot;SAMEORIGIN&quot; always; add_header Referrer-Policy &quot;strict-origin&quot;; add_header X-XSS-Protection &quot; 1; mode=block&quot;; location / { proxy_pass http://127.0.0.1:6081; proxy_set_header Host $host; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; proxy_set_header HTTPS &quot;on&quot;; access_log /var/log/nginx/your-website-access.log; error_log /var/log/nginx/your-website-error.log notice; } } server { listen 8080; listen [::]:8080 server_name your-website.com root /var/www/website; index index.html index.htm index.php } Explanation of the above configuration: We created 3 server blocks that listen to port 80, 443 and 8080 respectively: The first block redirect HTTP traffic to our HTTPS backend The second block direct HTTPS traffic to our Varnish cache which is listening on port 6081. This is also known as reverse proxy where we are directing traffic from port 443 to port 6081. We also added a few headers to increase security. Note: in order to use port 443, you should have configured SSL/TLS. The above configuration assumes you have set one up using letsencrypt. The third block listens on port 8080, which is called by Varnish to look up and cache our website’s contents. Enable our website configuration: $ sudo ln -s /etc/nginx/sites-available/your-website.com.conf /etc/nginx/sites-enabled/ Restart nginx and varnish: $ sudo systemctl restart nginx $ sudo systemctl restart varnish Testing Cache Test Use curl to test whether varnish is active: $ curl -I https://your-website.com HTTP/1.1 200 OK Server: nginx/1.18.0 (Ubuntu) Date: Sat, 25 Jul 2020 17:41:01 GMT Content-Type: text/html Content-Length: 24349 Connection: keep-alive Last-Modified: Sun, 19 Jul 2020 17:07:26 GMT Vary: Accept-Encoding X-Varnish: 184865969 184770543 Age: 6878 Via: 1.1 varnish (Varnish/6.2) ETag: W/&quot;5f1d-5aace6ca3b1d1-gzip&quot; Accept-Ranges: bytes Strict-Transport-Security: max-age=31536000 X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Referrer-Policy: strict-origin X-XSS-Protection: 1; mode=block Notice the following headers: X-Varnish: 184865969 184770543 Age: 6878 Via: 1.1 varnish (Varnish/6.2) It shows the website is being returned by Varnish cache. Load Test The result of a load test with 2000 concurrent users on https://jasonthai.me can be found at https://bit.ly/3jyxAeq Result of 1000 concurrent clients: Result of 2000 concurrent clients: What’s Next? Varnish supports multiple configurations including cache purging, cache skipping and TTL for cached contents. More resources can be found on their website. References https://varnish-cache.org/docs/index.html https://www.linode.com/docs/websites/varnish/getting-started-with-varnish-cache</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/NginxVarnish.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/NginxVarnish.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[High Availability Series] PART IV: Example Setup of Distributed Load Balancing Wallabag with Data Tier Clustering</title><link href="https://jasonthai.me/blog/2020/07/13/high-availability-series-part-iv-example-setup-of-distributed-load-balancing-wallabag-with-data-tier-clustering/" rel="alternate" type="text/html" title="[High Availability Series] PART IV: Example Setup of Distributed Load Balancing Wallabag with Data Tier Clustering" /><published>2020-07-13T00:00:00+00:00</published><updated>2020-07-13T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/07/13/high-availability-series-part-iv-example-setup-of-distributed-load-balancing-wallabag-with-data-tier-clustering</id><content type="html" xml:base="https://jasonthai.me/blog/2020/07/13/high-availability-series-part-iv-example-setup-of-distributed-load-balancing-wallabag-with-data-tier-clustering/">&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/ha-cluster.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/ha-cluster.png&quot; alt=&quot;HA Distributed Web Apps&quot; /&gt;
&lt;/picture&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Wallabag is a self hostable application for saving web pages: Save and classify articles. Read them later. Freely
&lt;a href=&quot;https://wallabag.org/en&quot;&gt;https://wallabag.org/en&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will provide an example of setting up a highly available web application. We will cover set up Wallabag using Docker Compose and configure HAProxy to load balance the multiple webservers that run Wallabag.&lt;/p&gt;

&lt;h1 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h1&gt;
&lt;p&gt;You should have set up the Galera cluster and configured HAProxy as the load balancer for the DB nodes. As shown in the diagram, the webserver node is the same as the HAProxy node configured to communicate with Galera cluster.
Refer to all the previous posts of HA Series to set them up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/&quot;&gt;[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/&quot;&gt;[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/07/03/high-availability-series-part-iii-high-availability-galera-cluster-with-haproxy-and-stunnel/&quot;&gt;[High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should also have set up Apache2 as your web server, and installed Docker and Docker Compose:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; get-docker.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sh get-docker.sh

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/docker-compose

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apache2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2enmod ssl proxy proxy_http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the IP of docker0 proto on the webserver node:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip r | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;docker0
172.17.0.0/16 dev docker0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 172.17.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The value is usually &lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;configure-the-first-webserver-instance&quot;&gt;Configure the first webserver instance&lt;/h1&gt;
&lt;h2 id=&quot;install-wallabag&quot;&gt;Install Wallabag&lt;/h2&gt;
&lt;p&gt;Create the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; and add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;
services:
  wallabag:
    image: wallabag/wallabag
    logging:
      driver: &lt;span class=&quot;s2&quot;&gt;&quot;json-file&quot;&lt;/span&gt;
      options:
        max-file: &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
        max-size: &lt;span class=&quot;s2&quot;&gt;&quot;10m&quot;&lt;/span&gt;
    environment:
      - &lt;span class=&quot;nv&quot;&gt;POPULATE_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_DRIVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pdo_mysql
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.17.0.1
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3307
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wallabag
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wallabag
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SOME SECURE PASSWORD&quot;&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DATABASE_CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8mb4
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__MAILER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ENTER YOUR VALUE HERE
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__MAILER_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ENTER YOUR VALUE HERE
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__MAILER_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ENTER YOUR VALUE HERE
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__FROM_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ENTER YOUR VALUE HERE
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__DOMAIN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ENTER YOUR VALUE HERE
      - &lt;span class=&quot;nv&quot;&gt;SYMFONY__ENV__FOSUSER_REGISTRATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;ports:
      - 8080:80
    volumes:
      - /opt/wallabag/images:/var/www/wallabag/web/assets/images
    restart: always
    network_mode: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Explanation of a few options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SYMFONYENVDATABASE_HOST=172.17.0.1&lt;/strong&gt; - The IP of docker0 proto we noted earlier. This tells docker to talk to the localhost mysql instance. Why not &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; ? Because docker communicates in its own subnet and &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; does not mean localhost.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SYMFONYENVDATABASE_PORT=3307&lt;/strong&gt; - As previously configured, &lt;code class=&quot;highlighter-rouge&quot;&gt;3307&lt;/code&gt; is the port we expose through HAProxy to talk to our Galera cluster&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;network_mode: bridge&lt;/strong&gt; - Configure the network mode in order for docker to talk to local mysql on the webserver node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start the container:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-apache-reverse-proxy-to-expose-wallabag-to-end-users&quot;&gt;Configure Apache reverse proxy to expose Wallabag to end users&lt;/h2&gt;
&lt;p&gt;The domain I use is &lt;a href=&quot;http://wallabag.jasonthai.me&quot;&gt;https://wallabag.jasonthai.me&lt;/a&gt;, you can change this to your own one.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/sites-available/wallabag.jasonthai.me.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:80&amp;gt;
    ServerName wallabag.jasonthai.me
    Redirect permanent / https://wallabag.jasonthai.me/
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:443&amp;gt;
    ServerAdmin webmaster@localhost
    ServerName wallabag.jasonthai.me
    ServerAlias wallabag.jasonthai.me

    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/

    ErrorLog &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/wallabag-error.log
    CustomLog &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/wallabag-access.log combined
SSLEngine on
SSLCertificateFile /etc/letsencrypt/live/jasonthai.me/fullchain.pem
SSLCertificateKeyFile /etc/letsencrypt/live/jasonthai.me/privkey.pem
Include /etc/letsencrypt/options-ssl-apache.conf
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: I have already configured SSL/TLS certificates. You need to configure one yourself.&lt;/p&gt;

&lt;p&gt;Enable the configuration and reload apache2:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2ensite /etc/apache2/sites-available/wallabag.jasonthai.me.conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl reload apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-the-second-and-third-webserver-node&quot;&gt;Configure the second and third webserver node&lt;/h1&gt;
&lt;p&gt;Do the same as the first node&lt;/p&gt;
&lt;h1 id=&quot;configure-haproxy-to-load-balance-three-webservers&quot;&gt;Configure HAProxy to load balance three webservers&lt;/h1&gt;
&lt;p&gt;ON your separate HAProxy node, Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; and add the following (remember to replace with your actual domain):&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;frontend https-in
    &lt;span class=&quot;c&quot;&gt;# Only bind on 80 if you also want to listen for connections on 80&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:443 ssl crt /etc/certs/jasonthai.me.pem
    &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; :::443 ssl crt /etc/certs/jasonthai.me.pem
    option httplog
    mode http
		
    acl wallabag hdr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;host&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wallabag.jasonthai.me
    use_backend wallabag &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;wallabag

    default_backend no-match
		
backend wallabag
    mode http
    balance roundrobin
    option ssl-hello-chk
    option httpchk HEAD /login HTTP/1.1&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;Host:wallabag.jasonthai.me
    http-check expect status 200

    http-request disable-l7-retry &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;METH_POST

    default-server ssl sni req.hdr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Host&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; check check-ssl verify none
    &lt;span class=&quot;c&quot;&gt;# Add an entry for each of your backend servers and their resolvable hostnames&lt;/span&gt;
    server webserver-01 IP-of-webserver-01:443
    server webserver-02 IP-of-webserver-02:443
    server webserver-03 IP-of-webserver-03:443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: I have already configured SSL/TLS certificates. You need to configure one yourself.&lt;/p&gt;

&lt;h1 id=&quot;configure-dns-for-your-wallabag-and-ip&quot;&gt;Configure DNS for your Wallabag and IP&lt;/h1&gt;
&lt;p&gt;Depending on your DNS provider, you will need to configure this yourself. Point your Wallabag domain you configured to the IP address of HAProxy node we have just configured. You may also add another HAProxy node and use a GEO-based DNS to improve the performance and add some more redundancy.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post provides an example of setting up a highly available Wallabag using the technology we have convered so far in the high availability series. Future post will go into details of some failover mechanisms and good practices for HA systems.&lt;/p&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/&quot;&gt;[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/&quot;&gt;[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/07/03/high-availability-series-part-iii-high-availability-galera-cluster-with-haproxy-and-stunnel/&quot;&gt;[High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://galeracluster.com/library/documentation/deployment-variants.html&quot;&gt;https://galeracluster.com/library/documentation/deployment-variants.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Introduction Wallabag is a self hostable application for saving web pages: Save and classify articles. Read them later. Freely https://wallabag.org/en This post will provide an example of setting up a highly available web application. We will cover set up Wallabag using Docker Compose and configure HAProxy to load balance the multiple webservers that run Wallabag. Prerequisite You should have set up the Galera cluster and configured HAProxy as the load balancer for the DB nodes. As shown in the diagram, the webserver node is the same as the HAProxy node configured to communicate with Galera cluster. Refer to all the previous posts of HA Series to set them up: [High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers [High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster [High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel You should also have set up Apache2 as your web server, and installed Docker and Docker Compose: $ curl -fsSL https://get.docker.com -o get-docker.sh $ sh get-docker.sh $ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose $ sudo apt install apache2 $ sudo a2enmod ssl proxy proxy_http Note the IP of docker0 proto on the webserver node: $ ip r | grep docker0 172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 The value is usually 172.17.0.1 Configure the first webserver instance Install Wallabag Create the docker-compose.yml and add the following lines: version: '2' services: wallabag: image: wallabag/wallabag logging: driver: &quot;json-file&quot; options: max-file: &quot;3&quot; max-size: &quot;10m&quot; environment: - POPULATE_DATABASE=false - SYMFONY__ENV__DATABASE_DRIVER=pdo_mysql - SYMFONY__ENV__DATABASE_HOST=172.17.0.1 - SYMFONY__ENV__DATABASE_PORT=3307 - SYMFONY__ENV__DATABASE_NAME=wallabag - SYMFONY__ENV__DATABASE_USER=wallabag - SYMFONY__ENV__DATABASE_PASSWORD=&quot;SOME SECURE PASSWORD&quot; - SYMFONY__ENV__DATABASE_CHARSET=utf8mb4 - SYMFONY__ENV__MAILER_HOST=ENTER YOUR VALUE HERE - SYMFONY__ENV__MAILER_USER=ENTER YOUR VALUE HERE - SYMFONY__ENV__MAILER_PASSWORD=ENTER YOUR VALUE HERE - SYMFONY__ENV__FROM_EMAIL=ENTER YOUR VALUE HERE - SYMFONY__ENV__DOMAIN_NAME=ENTER YOUR VALUE HERE - SYMFONY__ENV__FOSUSER_REGISTRATION=false ports: - 8080:80 volumes: - /opt/wallabag/images:/var/www/wallabag/web/assets/images restart: always network_mode: bridge Explanation of a few options: SYMFONYENVDATABASE_HOST=172.17.0.1 - The IP of docker0 proto we noted earlier. This tells docker to talk to the localhost mysql instance. Why not 127.0.0.1 ? Because docker communicates in its own subnet and 127.0.0.1 does not mean localhost. SYMFONYENVDATABASE_PORT=3307 - As previously configured, 3307 is the port we expose through HAProxy to talk to our Galera cluster network_mode: bridge - Configure the network mode in order for docker to talk to local mysql on the webserver node. Start the container: $ docker-compose up -d Configure Apache reverse proxy to expose Wallabag to end users The domain I use is https://wallabag.jasonthai.me, you can change this to your own one. Create /etc/apache2/sites-available/wallabag.jasonthai.me.conf and add the following: &amp;lt;VirtualHost *:80&amp;gt; ServerName wallabag.jasonthai.me Redirect permanent / https://wallabag.jasonthai.me/ &amp;lt;/VirtualHost&amp;gt; &amp;lt;VirtualHost *:443&amp;gt; ServerAdmin webmaster@localhost ServerName wallabag.jasonthai.me ServerAlias wallabag.jasonthai.me ProxyPreserveHost On ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ErrorLog ${APACHE_LOG_DIR}/wallabag-error.log CustomLog ${APACHE_LOG_DIR}/wallabag-access.log combined SSLEngine on SSLCertificateFile /etc/letsencrypt/live/jasonthai.me/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/jasonthai.me/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf &amp;lt;/VirtualHost&amp;gt; Note: I have already configured SSL/TLS certificates. You need to configure one yourself. Enable the configuration and reload apache2: $ sudo a2ensite /etc/apache2/sites-available/wallabag.jasonthai.me.conf $ sudo systemctl reload apache2 Configure the second and third webserver node Do the same as the first node Configure HAProxy to load balance three webservers ON your separate HAProxy node, Edit /etc/haproxy/haproxy.cfg and add the following (remember to replace with your actual domain): frontend https-in # Only bind on 80 if you also want to listen for connections on 80 bind *:443 ssl crt /etc/certs/jasonthai.me.pem bind :::443 ssl crt /etc/certs/jasonthai.me.pem option httplog mode http acl wallabag hdr(host) -i wallabag.jasonthai.me use_backend wallabag if wallabag default_backend no-match backend wallabag mode http balance roundrobin option ssl-hello-chk option httpchk HEAD /login HTTP/1.1\r\nHost:wallabag.jasonthai.me http-check expect status 200 http-request disable-l7-retry if METH_POST default-server ssl sni req.hdr(Host) check check-ssl verify none # Add an entry for each of your backend servers and their resolvable hostnames server webserver-01 IP-of-webserver-01:443 server webserver-02 IP-of-webserver-02:443 server webserver-03 IP-of-webserver-03:443 Note: I have already configured SSL/TLS certificates. You need to configure one yourself. Configure DNS for your Wallabag and IP Depending on your DNS provider, you will need to configure this yourself. Point your Wallabag domain you configured to the IP address of HAProxy node we have just configured. You may also add another HAProxy node and use a GEO-based DNS to improve the performance and add some more redundancy. Conclusion This post provides an example of setting up a highly available Wallabag using the technology we have convered so far in the high availability series. Future post will go into details of some failover mechanisms and good practices for HA systems. References [High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers [High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster [High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel https://galeracluster.com/library/documentation/deployment-variants.html</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/ha-cluster.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/ha-cluster.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel</title><link href="https://jasonthai.me/blog/2020/07/03/high-availability-series-part-iii-high-availability-galera-cluster-with-haproxy-and-stunnel/" rel="alternate" type="text/html" title="[High Availability Series] PART III: High Availability Galera Cluster with HAProxy and Stunnel" /><published>2020-07-03T00:00:00+00:00</published><updated>2020-07-03T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/07/03/high-availability-series-part-iii-high-availability-galera-cluster-with-haproxy-and-stunnel</id><content type="html" xml:base="https://jasonthai.me/blog/2020/07/03/high-availability-series-part-iii-high-availability-galera-cluster-with-haproxy-and-stunnel/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/haproxy-galera.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/haproxy-galera.png&quot; alt=&quot;HA Galera Cluster&quot; /&gt;
&lt;/picture&gt;

&lt;blockquote&gt;
  &lt;p&gt;HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world’s most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms
&lt;a href=&quot;https://www.haproxy.org&quot;&gt;https://www.haproxy.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stunnel is a proxy designed to add TLS encryption functionality to existing clients and servers without any changes in the programs’ code. Its architecture is optimized for security, portability, and scalability (including load-balancing), making it suitable for large deployments.
&lt;a href=&quot;https://www.stunnel.org&quot;&gt;https://www.stunnel.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will configure HAProxy as a load balancer to our Galera cluster.  This will help prevent having a single point of failure if any of our DB node is down. HAProxy will automatically route traffic to the other available nodes and keep connection to the cluster up.&lt;/p&gt;

&lt;p&gt;Stunnel is not necessary if connection between HAProxy to the DB nodes is private. This may not be the case if our DB node is geographically separated or from different providers where private subnets are not possible. We will configure Stunnel to ensure there is a private and secure tunnel between HAProxy to each of the DB nodes.&lt;/p&gt;

&lt;h1 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h1&gt;
&lt;p&gt;Determine how to install HAProxy 2.1 for your Debian based servers by going to &lt;a href=&quot;https://haproxy.debian.net/&quot;&gt;https://haproxy.debian.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Stunnel on our Galera nodes and HAProxy node:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; stunnel4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-stunnel-on-the-first-galera-node&quot;&gt;Configure Stunnel on the first Galera node:&lt;/h1&gt;
&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/stunnel/mysql.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configure our secured MySQL server&lt;/span&gt;

pid &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /run/stunnel.pid

&lt;span class=&quot;c&quot;&gt;# set to yes to allow logging to syslog&lt;/span&gt;
syslog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-server-galera-01]
cert &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-cert.pem
key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-key.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 13306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3306
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-stunnel-on-the-second-galera-node&quot;&gt;Configure Stunnel on the second Galera node:&lt;/h1&gt;
&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/stunnel/mysql.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configure our secured MySQL server&lt;/span&gt;

pid &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /run/stunnel.pid

&lt;span class=&quot;c&quot;&gt;# set to yes to allow logging to syslog&lt;/span&gt;
syslog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-server-galera-02]
cert &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-cert.pem
key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-key.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 23306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3306
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-stunnel-on-the-third-galera-node&quot;&gt;Configure Stunnel on the third Galera node:&lt;/h1&gt;
&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/stunnel/mysql.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configure our secured MySQL server&lt;/span&gt;

pid &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /run/stunnel.pid

&lt;span class=&quot;c&quot;&gt;# set to yes to allow logging to syslog&lt;/span&gt;
syslog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-server-galera-03]
cert &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-cert.pem
key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/client-key.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 33306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3306
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-stunnel-on-our-haproxy-node&quot;&gt;Configure Stunnel on our HAProxy node:&lt;/h1&gt;
&lt;p&gt;From any of the DB nodes, create &lt;code class=&quot;highlighter-rouge&quot;&gt;stunnel.pem&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /etc/mysql/certs/ca-cert.pem /etc/mysql/certs/client-cert.pem &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/mysql/certs/stunnel.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy &lt;code class=&quot;highlighter-rouge&quot;&gt;stunnel.pem&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/certs&lt;/code&gt; on our HAProxy node.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/stunnel/mysql.conf&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configure our secured MySQL server&lt;/span&gt;

pid &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /run/stunnel.pid

&lt;span class=&quot;c&quot;&gt;# set to yes to allow logging to syslog&lt;/span&gt;
syslog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-client-galera-01]
client &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;CAfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/stunnel.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1:13306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; IP-of-node1:13306
verify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
verifyChain &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-client-galera-02]
client &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;CAfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/stunnel.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1:23306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; IP-of-node2:23306
verify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
verifyChain &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql-client-galera-03]
client &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;CAfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc/mysql/certs/stunnel.pem
accept  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1:33306
connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; IP-of-node3:33306
verify &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
verifyChain &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some explanations of the configurations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;client&lt;/strong&gt; - specify that we are configuring to connect as a client&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CAfile&lt;/strong&gt; - specify the Cert Authority and the cert we will be using&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;accept&lt;/strong&gt; - accept connections on specified address&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;connect&lt;/strong&gt; - connect to a remote address&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verify&lt;/strong&gt; - verify the peer certificate.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verifiyChain&lt;/strong&gt; - verify the peer certificate chain starting from the root CA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Restart Stunnel to apply the config:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$haproxy&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart stunnel4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that all the connections are up:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$haproxy&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-node&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-tulpn&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;LISTEN
tcp     LISTEN   0        128            127.0.0.1:13306          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stunnel4&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;25228,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
tcp     LISTEN   0        128            127.0.0.1:23306          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stunnel4&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;25228,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
tcp     LISTEN   0        128            127.0.0.1:33306          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stunnel4&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;25228,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-haproxy&quot;&gt;Configure HAProxy&lt;/h1&gt;
&lt;p&gt;On one of the DB node,  login to MYSQL Console and create a user haproxy@127.0.0.1:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql
MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; create user &lt;span class=&quot;s1&quot;&gt;'haproxy'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'SOME-SECURE-PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This step is needed so HAProxy can do a health check to see whether our nodes are up and running.&lt;/p&gt;

&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;frontend galera_cluster_frontend
    &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:3307
    mode tcp
    option tcplog
    default_backend galera_cluster_backend

backend galera_cluster_backend
    mode tcp
    option tcpka
    option mysql-check user haproxy
    option dontlog-normal
    balance roundrobin
    server galera-01 127.0.0.1:13306 check weight 1
    server galera-02 127.0.0.1:23306 check weight 1
    server galera-03 127.0.0.1:33306 check weight 1

frontend stats
    &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;:8404
    stats &lt;span class=&quot;nb&quot;&gt;enable
    &lt;/span&gt;stats uri /
    stats refresh 10s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some explanations of options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;balance&lt;/strong&gt; – This defines the destination selection policy used to select a server to route the incoming connections to.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mode tcp&lt;/strong&gt; – Galera Cluster uses TCP type of connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;option tcpka&lt;/strong&gt; – Enables the keepalive function to maintain TCP connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;option mysql-check user haproxy&lt;/strong&gt; – Define backend database server check, to determine whether the node is currently operational.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;server  “server-name” “IP_address” check weight 1&lt;/strong&gt; – Defines the nodes you want HAProxy to use in routing connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Restart HAProxy to apply the config:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$haproxy&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;test-connection-via-haproxy&quot;&gt;Test Connection via HAProxy&lt;/h1&gt;
&lt;p&gt;Check that HAProxy has a bind on port 3307:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$haproxy&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ss &lt;span class=&quot;nt&quot;&gt;-tunelp&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;3307
tcp     LISTEN   0        128              0.0.0.0:3307          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;haproxy&quot;&lt;/span&gt;,pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;18324,fd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try to connect from HAProxy to port 3307:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$haproxy&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 3307 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; some_user &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
Enter password:
Welcome to the MariaDB monitor.  Commands end with &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Your MariaDB connection &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;is 39834
Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &lt;span class=&quot;s1&quot;&gt;'help;'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'\h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt; to clear the current input statement.

MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;checking-haproxys-stats-page&quot;&gt;Checking HAProxy’s Stats Page&lt;/h1&gt;
&lt;p&gt;If you noticed, we have configured a stats page for HAProxy on port 8404 in our config file. You can check out the stats page by going to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://IP-of-HAProxy-node:8404&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see something like this:&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/haproxy-stats.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/haproxy-stats.png&quot; alt=&quot;HAProxy Stats&quot; /&gt;
&lt;/picture&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;We have configured a HAProxy node as a load balancer to our Galera cluster. Connection between HAProxy to the three nodes is secured by Stunnel. In the next post, we will go over setting up a full HA webservers that are powered by a HA Galera cluster.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/&quot;&gt;[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/&quot;&gt;[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://computingforgeeks.com/galera-cluster-high-availability-with-haproxy-on-ubuntu-18-04-centos-7&quot;&gt;https://computingforgeeks.com/galera-cluster-high-availability-with-haproxy-on-ubuntu-18-04-centos-7&lt;/a&gt;&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Introduction HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world’s most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms https://www.haproxy.org Stunnel is a proxy designed to add TLS encryption functionality to existing clients and servers without any changes in the programs’ code. Its architecture is optimized for security, portability, and scalability (including load-balancing), making it suitable for large deployments. https://www.stunnel.org We will configure HAProxy as a load balancer to our Galera cluster. This will help prevent having a single point of failure if any of our DB node is down. HAProxy will automatically route traffic to the other available nodes and keep connection to the cluster up. Stunnel is not necessary if connection between HAProxy to the DB nodes is private. This may not be the case if our DB node is geographically separated or from different providers where private subnets are not possible. We will configure Stunnel to ensure there is a private and secure tunnel between HAProxy to each of the DB nodes. Prerequisite Determine how to install HAProxy 2.1 for your Debian based servers by going to https://haproxy.debian.net/ Install Stunnel on our Galera nodes and HAProxy node: $galera-01 sudo apt-get install -y stunnel4 Configure Stunnel on the first Galera node: Create /etc/stunnel/mysql.conf and add the following: # Configure our secured MySQL server pid = /run/stunnel.pid # set to yes to allow logging to syslog syslog = no [mysql-server-galera-01] cert = /etc/mysql/certs/client-cert.pem key = /etc/mysql/certs/client-key.pem accept = 13306 connect = 3306 Configure Stunnel on the second Galera node: Create /etc/stunnel/mysql.conf and add the following: # Configure our secured MySQL server pid = /run/stunnel.pid # set to yes to allow logging to syslog syslog = no [mysql-server-galera-02] cert = /etc/mysql/certs/client-cert.pem key = /etc/mysql/certs/client-key.pem accept = 23306 connect = 3306 Configure Stunnel on the third Galera node: Create /etc/stunnel/mysql.conf and add the following: # Configure our secured MySQL server pid = /run/stunnel.pid # set to yes to allow logging to syslog syslog = no [mysql-server-galera-03] cert = /etc/mysql/certs/client-cert.pem key = /etc/mysql/certs/client-key.pem accept = 33306 connect = 3306 Configure Stunnel on our HAProxy node: From any of the DB nodes, create stunnel.pem file: $galera-01 sudo cat /etc/mysql/certs/ca-cert.pem /etc/mysql/certs/client-cert.pem &amp;gt; /etc/mysql/certs/stunnel.pem Copy stunnel.pem to /etc/mysql/certs on our HAProxy node. Create /etc/stunnel/mysql.conf and add the following: # Configure our secured MySQL server pid = /run/stunnel.pid # set to yes to allow logging to syslog syslog = no [mysql-client-galera-01] client = yes CAfile = /etc/mysql/certs/stunnel.pem accept = 127.0.0.1:13306 connect = IP-of-node1:13306 verify = 2 verifyChain = yes [mysql-client-galera-02] client = yes CAfile = /etc/mysql/certs/stunnel.pem accept = 127.0.0.1:23306 connect = IP-of-node2:23306 verify = 2 verifyChain = yes [mysql-client-galera-03] client = yes CAfile = /etc/mysql/certs/stunnel.pem accept = 127.0.0.1:33306 connect = IP-of-node3:33306 verify = 2 verifyChain = yes Some explanations of the configurations: client - specify that we are configuring to connect as a client CAfile - specify the Cert Authority and the cert we will be using accept - accept connections on specified address connect - connect to a remote address verify - verify the peer certificate. verifiyChain - verify the peer certificate chain starting from the root CA Restart Stunnel to apply the config: $haproxy sudo systemctl restart stunnel4 Check that all the connections are up: $haproxy-node sudo ss -tulpn | grep LISTEN tcp LISTEN 0 128 127.0.0.1:13306 0.0.0.0:* users:((&quot;stunnel4&quot;,pid=25228,fd=7)) tcp LISTEN 0 128 127.0.0.1:23306 0.0.0.0:* users:((&quot;stunnel4&quot;,pid=25228,fd=8)) tcp LISTEN 0 128 127.0.0.1:33306 0.0.0.0:* users:((&quot;stunnel4&quot;,pid=25228,fd=9)) Configure HAProxy On one of the DB node, login to MYSQL Console and create a user haproxy@127.0.0.1: $galera-01 sudo mysql MariaDB [(none)]&amp;gt; create user 'haproxy'@'127.0.0.1' IDENTIFIED BY 'SOME-SECURE-PASSWORD'; This step is needed so HAProxy can do a health check to see whether our nodes are up and running. Edit /etc/haproxy/haproxy.cfg and add the following: frontend galera_cluster_frontend bind *:3307 mode tcp option tcplog default_backend galera_cluster_backend backend galera_cluster_backend mode tcp option tcpka option mysql-check user haproxy option dontlog-normal balance roundrobin server galera-01 127.0.0.1:13306 check weight 1 server galera-02 127.0.0.1:23306 check weight 1 server galera-03 127.0.0.1:33306 check weight 1 frontend stats bind *:8404 stats enable stats uri / stats refresh 10s Some explanations of options: balance – This defines the destination selection policy used to select a server to route the incoming connections to. mode tcp – Galera Cluster uses TCP type of connections. option tcpka – Enables the keepalive function to maintain TCP connections. option mysql-check user haproxy – Define backend database server check, to determine whether the node is currently operational. server “server-name” “IP_address” check weight 1 – Defines the nodes you want HAProxy to use in routing connections. Restart HAProxy to apply the config: $haproxy sudo systemctl restart haproxy Test Connection via HAProxy Check that HAProxy has a bind on port 3307: $haproxy sudo ss -tunelp | grep 3307 tcp LISTEN 0 128 0.0.0.0:3307 0.0.0.0:* users:((&quot;haproxy&quot;,pid=18324,fd=5)) Try to connect from HAProxy to port 3307: $haproxy sudo mysql -h 127.0.0.1 -P 3307 -u some_user -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 39834 Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;gt; Checking HAProxy’s Stats Page If you noticed, we have configured a stats page for HAProxy on port 8404 in our config file. You can check out the stats page by going to http://IP-of-HAProxy-node:8404 You will see something like this: Conclusions We have configured a HAProxy node as a load balancer to our Galera cluster. Connection between HAProxy to the three nodes is secured by Stunnel. In the next post, we will go over setting up a full HA webservers that are powered by a HA Galera cluster. Resources [High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers [High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster https://computingforgeeks.com/galera-cluster-high-availability-with-haproxy-on-ubuntu-18-04-centos-7</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/haproxy-galera.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/haproxy-galera.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster</title><link href="https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/" rel="alternate" type="text/html" title="[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster" /><published>2020-06-20T00:00:00+00:00</published><updated>2020-06-20T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster</id><content type="html" xml:base="https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Second part of the series covers how to set up and secure a multi master Galera cluster consisting of 3 mariadb servers. A multi master cluster allow reads and writes from any of the nodes. Changes are replicated synchronously to the other nodes.&lt;/p&gt;

&lt;p&gt;We will go over how to set it up and secure the communication between the three nodes. There are 3 different vectors that we can secure through SSL: traffic between the database server and client, replication traffic within Galera Cluster, and the State Snapshot Transfer (SST). We will go over all three.&lt;/p&gt;

&lt;h1 id=&quot;initial-configuration&quot;&gt;Initial Configuration:&lt;/h1&gt;
&lt;p&gt;On every node of the cluster, add the following lines in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IP-of-node1 galera-01
IP-of-node2 galera-02
IP-of-node3 galera-03
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Optional: Setting up the firewall to only allow cluster traffic communication between the three nodes with ufw. 
Galera requires a number of ports for connectivity between its nodes. Below is the list:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3306 is the default port for MySQL client connections and State Snapshot Transfer using mysqldump for backups.
4567 is reserved for Galera Cluster replication traffic. Multicast replication uses both TCP and UDP transport on this port.
4568 is the port for Incremental State Transfer.
4444 is used for all other State Snapshot Transfer.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Example of ufw configuration on node1:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node2 to any port 3306 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node2 to any port 4444 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node2 to any port 4567 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node2 to any port 4568 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node2 to any port 4567 proto udp

&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node3 to any port 3306 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node3 to any port 4444 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node3 to any port 4567 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node3 to any port 4568 proto tcp
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw allow from IP-of-node3 to any port 4567 proto udp

&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-the-first-node&quot;&gt;Configure the first node:&lt;/h1&gt;
&lt;p&gt;Following the the first part of the series, we have covered securing the traffic between the server and the client. Now we are ready to initialize the first node of the cluster.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/mariadb.conf.d/galera.cnf&lt;/code&gt; and add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;nv&quot;&gt;binlog_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ROW
default-storage-engine&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;innodb
&lt;span class=&quot;nv&quot;&gt;innodb_autoinc_lock_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
bind-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0

&lt;span class=&quot;c&quot;&gt;# Galera Provider Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON
&lt;span class=&quot;nv&quot;&gt;wsrep_provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/galera/libgalera_smm.so
&lt;span class=&quot;c&quot;&gt;# Configuration to secure traffic replication&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_provider_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Cluster Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;galera_cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcomm://galera-01,galera-02,galera-03&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Synchronization Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xtra:replace-your-verify-secure-replication-password-here
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mariabackup

&lt;span class=&quot;c&quot;&gt;# Galera Node Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_node_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-01
&lt;span class=&quot;nv&quot;&gt;wsrep_node_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-db-01

&lt;span class=&quot;c&quot;&gt;# Configuration to secure the SST connection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sst]
&lt;span class=&quot;nv&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;tcert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-cert.pem
&lt;span class=&quot;nv&quot;&gt;tkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inititialize Galera cluster:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl stop mariadb
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;galera_new_cluster
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status mariadb 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-the-second-node&quot;&gt;Configure the second node:&lt;/h1&gt;
&lt;p&gt;Following part I of the series, we have created all the necessary certs in node 1 of the cluster. We do not have to create the certs again, simply copy the certs from the first node to the second node and place them in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/certs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/mariadb.conf.d/galera.cnf&lt;/code&gt; and add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;nv&quot;&gt;binlog_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ROW
default-storage-engine&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;innodb
&lt;span class=&quot;nv&quot;&gt;innodb_autoinc_lock_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
bind-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0

&lt;span class=&quot;c&quot;&gt;# Galera Provider Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON
&lt;span class=&quot;nv&quot;&gt;wsrep_provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/galera/libgalera_smm.so
&lt;span class=&quot;c&quot;&gt;# Configuration to secure traffic replication&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_provider_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Cluster Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;galera_cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcomm://galera-01,galera-02,galera-03&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Synchronization Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xtra:replace-your-verify-secure-replication-password-here
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mariabackup

&lt;span class=&quot;c&quot;&gt;# Galera Node Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_node_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-02
&lt;span class=&quot;nv&quot;&gt;wsrep_node_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-db-02

&lt;span class=&quot;c&quot;&gt;# Configuration to secure the SST connection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sst]
&lt;span class=&quot;nv&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;tcert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-cert.pem
&lt;span class=&quot;nv&quot;&gt;tkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart Mariadb&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-02&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart mariadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;configure-the-third-node&quot;&gt;Configure the third node:&lt;/h1&gt;
&lt;p&gt;Again copy the certs from the first node to the third node and place them in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/certs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/mariadb.conf.d/galera.cnf&lt;/code&gt; and add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqld]
&lt;span class=&quot;nv&quot;&gt;binlog_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ROW
default-storage-engine&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;innodb
&lt;span class=&quot;nv&quot;&gt;innodb_autoinc_lock_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
bind-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0

&lt;span class=&quot;c&quot;&gt;# Galera Provider Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON
&lt;span class=&quot;nv&quot;&gt;wsrep_provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/galera/libgalera_smm.so
&lt;span class=&quot;c&quot;&gt;# Configuration to secure traffic replication&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_provider_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Cluster Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;galera_cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_cluster_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcomm://galera-01,galera-02,galera-03&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Galera Synchronization Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xtra:replace-your-verify-secure-replication-password-here
&lt;span class=&quot;nv&quot;&gt;wsrep_sst_method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mariabackup

&lt;span class=&quot;c&quot;&gt;# Galera Node Configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wsrep_node_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-03
&lt;span class=&quot;nv&quot;&gt;wsrep_node_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;galera-db-03

&lt;span class=&quot;c&quot;&gt;# Configuration to secure the SST connection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sst]
&lt;span class=&quot;nv&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;tcert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-cert.pem
&lt;span class=&quot;nv&quot;&gt;tkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart Mariadb&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-03&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart mariadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;verify-mariadb-galera-cluster-settings&quot;&gt;Verify MariaDB Galera Cluster Settings&lt;/h1&gt;
&lt;p&gt;Login to MySQL console from a node in the cluster as root user.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Welcome to the MariaDB monitor.  Commands end with &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Your MariaDB connection &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;is 122994
Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &lt;span class=&quot;s1&quot;&gt;'help;'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'\h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt; to clear the current input statement.

MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the cluster size:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; SHOW STATUS LIKE &lt;span class=&quot;s1&quot;&gt;'wsrep_cluster_size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 3     |
+--------------------+-------+
1 row &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.001 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To view all status related to cluster:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; SHOW GLOBAL STATUS LIKE &lt;span class=&quot;s1&quot;&gt;'wsrep_%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;verify-cluster-replication&quot;&gt;Verify Cluster Replication&lt;/h1&gt;
&lt;p&gt;On node1:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql
Welcome to the MariaDB monitor.  Commands end with &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Your MariaDB connection &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;is 118912
Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &lt;span class=&quot;s1&quot;&gt;'help;'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'\h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt; to clear the current input statement.

MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; create database test1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Query OK, 1 row affected &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.033 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; show databases&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test1              |
+--------------------+
4 rows &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.410 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On node 2 or 3:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-03&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql
Welcome to the MariaDB monitor.  Commands end with &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Your MariaDB connection &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;is 124058
Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &lt;span class=&quot;s1&quot;&gt;'help;'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'\h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt; to clear the current input statement.

MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; show databases&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test1              |
+--------------------+
4 rows &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.954 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;verify-secure-connection-between-nodes&quot;&gt;Verify Secure Connection Between Nodes&lt;/h1&gt;
&lt;p&gt;Check mysql logs to see connection is indeed through SSL:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /var/log/mysql/error.log | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ssl
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: initializing ssl context
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;38f78cdc-ac66, &lt;span class=&quot;s1&quot;&gt;'ssl://0.0.0.0:4567'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; listening at ssl://0.0.0.0:4567
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;38f78cdc-ac66, &lt;span class=&quot;s1&quot;&gt;'ssl://0.0.0.0:4567'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; multicast: , ttl: 1
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;endpoint ssl://XXX:46756 cipher: TLS_AES_256_GCM_SHA384 compression: none
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;endpoint ssl://XXX:57914 cipher: TLS_AES_256_GCM_SHA384 compression: none
2020-06-20 11:24:04 0 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;endpoint ssl://XXX:59148 cipher: TLS_AES_256_GCM_SHA384 compression: none
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post guides us how to set up and secure a 3-node Galera cluster. Next post will cover setting up proxy to connect a client to multiple Mariadb nodes securely using stunnel and configure load balancer with HAProxy.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/&quot;&gt;[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://galeracluster.com/library/documentation/ssl-config.html&quot;&gt;https://galeracluster.com/library/documentation/ssl-config.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://galeracluster.com/library/documentation/firewall-settings.html&quot;&gt;https://galeracluster.com/library/documentation/firewall-settings.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster&quot;&gt;https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster&lt;/a&gt;&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Introduction Second part of the series covers how to set up and secure a multi master Galera cluster consisting of 3 mariadb servers. A multi master cluster allow reads and writes from any of the nodes. Changes are replicated synchronously to the other nodes. We will go over how to set it up and secure the communication between the three nodes. There are 3 different vectors that we can secure through SSL: traffic between the database server and client, replication traffic within Galera Cluster, and the State Snapshot Transfer (SST). We will go over all three. Initial Configuration: On every node of the cluster, add the following lines in /etc/hosts: IP-of-node1 galera-01 IP-of-node2 galera-02 IP-of-node3 galera-03 Optional: Setting up the firewall to only allow cluster traffic communication between the three nodes with ufw. Galera requires a number of ports for connectivity between its nodes. Below is the list: 3306 is the default port for MySQL client connections and State Snapshot Transfer using mysqldump for backups. 4567 is reserved for Galera Cluster replication traffic. Multicast replication uses both TCP and UDP transport on this port. 4568 is the port for Incremental State Transfer. 4444 is used for all other State Snapshot Transfer. Example of ufw configuration on node1: $galera-01 sudo ufw allow from IP-of-node2 to any port 3306 proto tcp $galera-01 sudo ufw allow from IP-of-node2 to any port 4444 proto tcp $galera-01 sudo ufw allow from IP-of-node2 to any port 4567 proto tcp $galera-01 sudo ufw allow from IP-of-node2 to any port 4568 proto tcp $galera-01 sudo ufw allow from IP-of-node2 to any port 4567 proto udp $galera-01 sudo ufw allow from IP-of-node3 to any port 3306 proto tcp $galera-01 sudo ufw allow from IP-of-node3 to any port 4444 proto tcp $galera-01 sudo ufw allow from IP-of-node3 to any port 4567 proto tcp $galera-01 sudo ufw allow from IP-of-node3 to any port 4568 proto tcp $galera-01 sudo ufw allow from IP-of-node3 to any port 4567 proto udp $galera-01 sudo ufw reload Configure the first node: Following the the first part of the series, we have covered securing the traffic between the server and the client. Now we are ready to initialize the first node of the cluster. Create /etc/mysql/mariadb.conf.d/galera.cnf and add the following lines: [mysqld] binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # Galera Provider Configuration wsrep_on=ON wsrep_provider=/usr/lib/galera/libgalera_smm.so # Configuration to secure traffic replication wsrep_provider_options=&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot; # Galera Cluster Configuration wsrep_cluster_name=&quot;galera_cluster&quot; wsrep_cluster_address=&quot;gcomm://galera-01,galera-02,galera-03&quot; # Galera Synchronization Configuration wsrep_sst_auth=xtra:replace-your-verify-secure-replication-password-here wsrep_sst_method=mariabackup # Galera Node Configuration wsrep_node_address=galera-01 wsrep_node_name=galera-db-01 # Configuration to secure the SST connection [sst] encrypt=3 tcert=/etc/mysql/certs/server-cert.pem tkey=/etc/mysql/certs/server-key.pem Inititialize Galera cluster: $galera-01 sudo systemctl stop mariadb $galera-01 sudo galera_new_cluster $galera-01 sudo systemctl status mariadb Configure the second node: Following part I of the series, we have created all the necessary certs in node 1 of the cluster. We do not have to create the certs again, simply copy the certs from the first node to the second node and place them in /etc/mysql/certs Create /etc/mysql/mariadb.conf.d/galera.cnf and add the following lines: [mysqld] binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # Galera Provider Configuration wsrep_on=ON wsrep_provider=/usr/lib/galera/libgalera_smm.so # Configuration to secure traffic replication wsrep_provider_options=&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot; # Galera Cluster Configuration wsrep_cluster_name=&quot;galera_cluster&quot; wsrep_cluster_address=&quot;gcomm://galera-01,galera-02,galera-03&quot; # Galera Synchronization Configuration wsrep_sst_auth=xtra:replace-your-verify-secure-replication-password-here wsrep_sst_method=mariabackup # Galera Node Configuration wsrep_node_address=galera-02 wsrep_node_name=galera-db-02 # Configuration to secure the SST connection [sst] encrypt=3 tcert=/etc/mysql/certs/server-cert.pem tkey=/etc/mysql/certs/server-key.pem Restart Mariadb $galera-02 sudo systemctl restart mariadb Configure the third node: Again copy the certs from the first node to the third node and place them in /etc/mysql/certs Create /etc/mysql/mariadb.conf.d/galera.cnf and add the following lines: [mysqld] binlog_format=ROW default-storage-engine=innodb innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # Galera Provider Configuration wsrep_on=ON wsrep_provider=/usr/lib/galera/libgalera_smm.so # Configuration to secure traffic replication wsrep_provider_options=&quot;socket.ssl_key=/etc/mysql/certs/server-key.pem;socket.ssl_cert=/etc/mysql/certs/server-cert.pem;socket.ssl_ca=/etc/mysql/certs/ca-cert.pem&quot; # Galera Cluster Configuration wsrep_cluster_name=&quot;galera_cluster&quot; wsrep_cluster_address=&quot;gcomm://galera-01,galera-02,galera-03&quot; # Galera Synchronization Configuration wsrep_sst_auth=xtra:replace-your-verify-secure-replication-password-here wsrep_sst_method=mariabackup # Galera Node Configuration wsrep_node_address=galera-03 wsrep_node_name=galera-db-03 # Configuration to secure the SST connection [sst] encrypt=3 tcert=/etc/mysql/certs/server-cert.pem tkey=/etc/mysql/certs/server-key.pem Restart Mariadb $galera-03 sudo systemctl restart mariadb Verify MariaDB Galera Cluster Settings Login to MySQL console from a node in the cluster as root user. Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 122994 Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;gt; Check the cluster size: MariaDB [(none)]&amp;gt; SHOW STATUS LIKE 'wsrep_cluster_size'; +--------------------+-------+ | Variable_name | Value | +--------------------+-------+ | wsrep_cluster_size | 3 | +--------------------+-------+ 1 row in set (0.001 sec) To view all status related to cluster: MariaDB [(none)]&amp;gt; SHOW GLOBAL STATUS LIKE 'wsrep_%'; Verify Cluster Replication On node1: $galera-01 sudo mysql Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 118912 Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;gt; create database test1; Query OK, 1 row affected (0.033 sec) MariaDB [(none)]&amp;gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | test1 | +--------------------+ 4 rows in set (0.410 sec) On node 2 or 3: $galera-03 sudo mysql Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 124058 Server version: 10.4.13-MariaDB-1:10.4.13+maria~buster mariadb.org binary distribution Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | test1 | +--------------------+ 4 rows in set (0.954 sec) Verify Secure Connection Between Nodes Check mysql logs to see connection is indeed through SSL: $galera-01 sudo cat /var/log/mysql/error.log | grep ssl 2020-06-20 11:24:04 0 [Note] WSREP: initializing ssl context 2020-06-20 11:24:04 0 [Note] WSREP: (38f78cdc-ac66, 'ssl://0.0.0.0:4567') listening at ssl://0.0.0.0:4567 2020-06-20 11:24:04 0 [Note] WSREP: (38f78cdc-ac66, 'ssl://0.0.0.0:4567') multicast: , ttl: 1 2020-06-20 11:24:04 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 local endpoint ssl://XXX:46756 cipher: TLS_AES_256_GCM_SHA384 compression: none 2020-06-20 11:24:04 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 local endpoint ssl://XXX:57914 cipher: TLS_AES_256_GCM_SHA384 compression: none 2020-06-20 11:24:04 0 [Note] WSREP: SSL handshake successful, remote endpoint ssl://XXX:4567 local endpoint ssl://XXX:59148 cipher: TLS_AES_256_GCM_SHA384 compression: none Conclusion This post guides us how to set up and secure a 3-node Galera cluster. Next post will cover setting up proxy to connect a client to multiple Mariadb nodes securely using stunnel and configure load balancer with HAProxy. Resources [High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers https://galeracluster.com/library/documentation/ssl-config.html https://galeracluster.com/library/documentation/firewall-settings.html https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/galera_small.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/galera_small.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers</title><link href="https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/" rel="alternate" type="text/html" title="[High Availability Series] PART I: Set Up and Use SSL to Secure MariaDB on Debian Servers" /><published>2020-06-08T00:00:00+00:00</published><updated>2020-06-08T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers</id><content type="html" xml:base="https://jasonthai.me/blog/2020/06/08/high-availability-series-part-i-set-up-and-secure-mariadb-on-debian-servers/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;First part of the series covers how to set up and secure MariaDB.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;MariaDB is a community-developed, commercially supported fork of the MySQL relational database management system, intended to remain free and open-source software under the GNU General Public License
&lt;a href=&quot;https://en.wikipedia.org/wiki/MariaDB&quot;&gt;https://en.wikipedia.org/wiki/MariaDB&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The series will guide through how to set up a Galera cluster with 3 nodes, secure connection between them, and finally set up HAProxy as a load balancer to the webservers where each webserver talks to a particular MariaDB instance on the same server. This purpose is to have a highly available and endurable system which is expected to run continuously without failure for a long time. This only covers horizontal scaling of different nodes. Vertical scaling may be covered in the future.&lt;/p&gt;

&lt;h1 id=&quot;set-up-mariadb&quot;&gt;Set up MariaDB&lt;/h1&gt;
&lt;p&gt;Install MariaDB packages:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mariadb-server mariadb-backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the security script:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we&lt;span class=&quot;s1&quot;&gt;'ll need the current
password for the root user.  If you'&lt;/span&gt;ve just installed MariaDB, and
you haven&lt;span class=&quot;s1&quot;&gt;'t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] Y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from '&lt;/span&gt;localhost&lt;span class=&quot;s1&quot;&gt;'.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MariaDB comes with a database named '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...

All done!  If you'&lt;/span&gt;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;using MariaDB!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;h1 id=&quot;set-up-ssl-for-mariadb&quot;&gt;Set up SSL for MariaDB&lt;/h1&gt;
&lt;h2 id=&quot;create-ca-certificate&quot;&gt;Create CA Certificate&lt;/h2&gt;
&lt;p&gt;Make a directory named certs in /etc/mysql/ directory using the mkdir command:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/mysql
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo mkdir &lt;/span&gt;certs
&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;certs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: Common Name value used for the server and client certificates/keys must each differ from the Common Name value used for the CA certificate. To avoid any issues, set it as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CA common Name : MariaDB admin&lt;/li&gt;
  &lt;li&gt;Server common Name: MariaDB server&lt;/li&gt;
  &lt;li&gt;Client common Name: MariaDB client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type the following command to create a new CA key:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl genrsa 2048 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ca-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl genrsa 4096 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ca-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating RSA private key, 2048 bit long modulus &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 primes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
.......+++++
..............................................................+++++
e is 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x010001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Type the following command to generate the certificate using that key:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365000 &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; ca-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;, the field will be left blank.
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AU]:
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Some-State]:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd]:
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:MariaDB admin
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Now there should be two files as follows:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /etc/mysql/certs
ca-cert.pem – Certificate file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the Certificate Authority &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
ca-key.pem – Key file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the Certificate Authority &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s use both files to generate the server and client certificates.&lt;/p&gt;
&lt;h2 id=&quot;create-the-server-ssl-certificate&quot;&gt;Create the server SSL certificate&lt;/h2&gt;
&lt;p&gt;To create the server key, run:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:2048 &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365000 &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; server-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server-req.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating a RSA private key
.........................................................................................................................................+++++
...........................................................+++++
writing new private key to &lt;span class=&quot;s1&quot;&gt;'server-key.pem'&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;, the field will be left blank.
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AU]:
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Some-State]:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd]:
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:MariaDB server
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:

Please enter the following &lt;span class=&quot;s1&quot;&gt;'extra'&lt;/span&gt; attributes
to be sent with your certificate request
A challenge password &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
An optional company name &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Next process the server RSA key, enter:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; server-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writing RSA key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Finally sign the server certificate, run:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; server-req.pem &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365000 &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; ca-cert.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-set_serial&lt;/span&gt; 01 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Signature ok
&lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; AU, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some-State, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Internet Widgits Pty Ltd, CN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MariaDB server
Getting CA Private Key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Now you should have these two additional files:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/mysql/certs/server-cert.pem – MariaDB server certificate file.
/etc/mysql/certs/server-key.pem – MariaDB server key file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;create-the-client-tlsssl-certificate&quot;&gt;Create the client TLS/SSL certificate&lt;/h2&gt;
&lt;p&gt;To create the client key, run:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:2048 &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365000 &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; client-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client-req.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating a RSA private key
.......................................+++++
...............+++++
writing new private key to &lt;span class=&quot;s1&quot;&gt;'client-key.pem'&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;, the field will be left blank.
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AU]:
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Some-State]:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd]:
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:Mariadb client
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:

Please enter the following &lt;span class=&quot;s1&quot;&gt;'extra'&lt;/span&gt; attributes
to be sent with your certificate request
A challenge password &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
An optional company name &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;

&lt;p&gt;Next, process client RSA key, enter:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; client-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writing RSA key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;p&gt;Finally, sign the client certificate, run:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; client-req.pem &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365000 &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; ca-cert.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-set_serial&lt;/span&gt; 01 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Signature ok
&lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/C&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;AU/ST&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Some-State/O&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Internet Widgits Pty Ltd/CN&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MariaDB client
Getting CA Private Key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;h2 id=&quot;verify-the-certificates&quot;&gt;Verify the certificates&lt;/h2&gt;
&lt;p&gt;Type the following command to verify the certificates to make sure everything was created correctly:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; openssl verify &lt;span class=&quot;nt&quot;&gt;-CAfile&lt;/span&gt; ca-cert.pem server-cert.pem client-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
    &lt;summary&gt;Sample output:
&lt;/summary&gt;
    
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server-cert.pem: OK
client-cert.pem: OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;h2 id=&quot;configure-ssl-for-mariadb-server&quot;&gt;Configure SSL for MariaDB Server&lt;/h2&gt;
&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/mariadb.conf.d/50-server.cnf&lt;/code&gt; and add the following lines in [mysqld] section:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl-ca&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/ca-cert.pem
ssl-cert&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-cert.pem
ssl-key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/server-key.pem
bind-address            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Give permission to mysql so it can read the certs properly:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Rv&lt;/span&gt; mysql:root /etc/mysql/certs/

changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/server-key.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/client-req.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/server-req.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/ca-key.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/server-cert.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/client-cert.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/ca-cert.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/client-key.pem'&lt;/span&gt; from root:root to mysql:root
changed ownership of &lt;span class=&quot;s1&quot;&gt;'/etc/mysql/certs/'&lt;/span&gt; from root:root to mysql:root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, restart MariaDB service to apply the changes:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, log in to MariaDB shell and check SSL variable:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Enter your root password, then run the following command:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)]&amp;gt;&lt;/span&gt; SHOW VARIABLES LIKE &lt;span class=&quot;s1&quot;&gt;'%ssl%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see that SSL variables are now enabled:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+---------------------+----------------------------------+
| Variable_name       | Value                            |
+---------------------+----------------------------------+
| have_openssl        | NO                               |
| have_ssl            | YES                              |
| ssl_ca              | /etc/mysql/certs/ca-cert.pem     |
| ssl_capath          |                                  |
| ssl_cert            | /etc/mysql/certs/server-cert.pem |
| ssl_cipher          |                                  |
| ssl_crl             |                                  |
| ssl_crlpath         |                                  |
| ssl_key             | /etc/mysql/certs/server-key.pem  |
| version_ssl_library | YaSSL 2.4.4                      |
+---------------------+----------------------------------+
10 rows &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.001 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;configure-ssl-for-mariadb-client&quot;&gt;Configure SSL for MariaDB Client&lt;/h2&gt;
&lt;p&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/mysql/mariadb.conf.d/50-client.cnf&lt;/code&gt; and add the following lines in [client] section:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl-ca&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/ca-cert.pem
ssl-cert&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/client-cert.pem
ssl-key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/mysql/certs/client-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;verify-secure-connection&quot;&gt;Verify Secure Connection&lt;/h2&gt;
&lt;p&gt;Log in to MariaDB shell:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$galera&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-01&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, check the status of connection with the following command:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysql]&amp;gt; status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Detail about secure connection should be displayed like so:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--------------&lt;/span&gt;
mysql  Ver 15.1 Distrib 10.3.22-MariaDB, &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;debian-linux-gnu &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; using readline 5.2

Connection &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;:		282
Current database:
Current user:		root@localhost
SSL:			Cipher &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;use is DHE-RSA-AES256-SHA
Current pager:		stdout
Using outfile:		&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
Using delimiter:	&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Server:			MariaDB
Server version:		10.3.22-MariaDB-0+deb10u1 Debian 10
Protocol version:	10
Connection:		Localhost via UNIX socket
Server characterset:	utf8mb4
Db     characterset:	utf8mb4
Client characterset:	utf8mb4
Conn.  characterset:	utf8mb4
UNIX socket:		/var/run/mysqld/mysqld.sock
Uptime:			7 hours 27 min 20 sec

Threads: 10  Questions: 31302  Slow queries: 0  Opens: 159  Flush tables: 1  Open tables: 63  Queries per second avg: 1.166
&lt;span class=&quot;nt&quot;&gt;--------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post guides us how to set up a MariaDB server and secure connection between the server and its clients. Next post will cover setting up the Galera cluster.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/secure-connections-overview&quot;&gt;https://mariadb.com/kb/en/secure-connections-overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mariadb.com/kb/en/securing-connections-for-client-and-server&quot;&gt;https://mariadb.com/kb/en/securing-connections-for-client-and-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jasonthai.me/blog/2020/06/20/high-availability-series-part-ii-configure-and-secure-a-3-node-galera-cluster/&quot;&gt;[High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster&lt;/a&gt;&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Introduction First part of the series covers how to set up and secure MariaDB. MariaDB is a community-developed, commercially supported fork of the MySQL relational database management system, intended to remain free and open-source software under the GNU General Public License https://en.wikipedia.org/wiki/MariaDB The series will guide through how to set up a Galera cluster with 3 nodes, secure connection between them, and finally set up HAProxy as a load balancer to the webservers where each webserver talks to a particular MariaDB instance on the same server. This purpose is to have a highly available and endurable system which is expected to run continuously without failure for a long time. This only covers horizontal scaling of different nodes. Vertical scaling may be covered in the future. Set up MariaDB Install MariaDB packages: $galera-01 sudo apt-get install mariadb-server mariadb-backup Run the security script: $galera-01 sudo mysql_secure_installation Sample output: NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] Y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] Y ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] Y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! Set up SSL for MariaDB Create CA Certificate Make a directory named certs in /etc/mysql/ directory using the mkdir command: $galera-01 cd /etc/mysql $galera-01 sudo mkdir certs $galera-01 cd certs Note: Common Name value used for the server and client certificates/keys must each differ from the Common Name value used for the CA certificate. To avoid any issues, set it as follows: CA common Name : MariaDB admin Server common Name: MariaDB server Client common Name: MariaDB client Type the following command to create a new CA key: $galera-01 sudo openssl genrsa 2048 &amp;gt; ca-key.pem OR $galera-01 sudo openssl genrsa 4096 &amp;gt; ca-key.pem Sample output: Generating RSA private key, 2048 bit long modulus (2 primes) .......+++++ ..............................................................+++++ e is 65537 (0x010001) Type the following command to generate the certificate using that key: $galera-01 sudo openssl req -new -x509 -nodes -days 365000 -key ca-key.pem -out ca-cert.pem Sample output: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]: State or Province Name (full name) [Some-State]: Locality Name (eg, city) []: Organization Name (eg, company) [Internet Widgits Pty Ltd]: Organizational Unit Name (eg, section) []: Common Name (e.g. server FQDN or YOUR name) []:MariaDB admin Email Address []: Now there should be two files as follows: $galera-01 ls /etc/mysql/certs ca-cert.pem – Certificate file for the Certificate Authority (CA). ca-key.pem – Key file for the Certificate Authority (CA). Let’s use both files to generate the server and client certificates. Create the server SSL certificate To create the server key, run: $galera-01 sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout server-key.pem -out server-req.pem Sample output: Generating a RSA private key .........................................................................................................................................+++++ ...........................................................+++++ writing new private key to 'server-key.pem' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]: State or Province Name (full name) [Some-State]: Locality Name (eg, city) []: Organization Name (eg, company) [Internet Widgits Pty Ltd]: Organizational Unit Name (eg, section) []: Common Name (e.g. server FQDN or YOUR name) []:MariaDB server Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: Next process the server RSA key, enter: $galera-01 sudo openssl rsa -in server-key.pem -out server-key.pem Sample output: writing RSA key Finally sign the server certificate, run: $galera-01 sudo openssl x509 -req -in server-req.pem -days 365000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem Sample output: Signature ok subject=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = MariaDB server Getting CA Private Key Now you should have these two additional files: /etc/mysql/certs/server-cert.pem – MariaDB server certificate file. /etc/mysql/certs/server-key.pem – MariaDB server key file. Create the client TLS/SSL certificate To create the client key, run: $galera-01 sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout client-key.pem -out client-req.pem Sample output: Generating a RSA private key .......................................+++++ ...............+++++ writing new private key to 'client-key.pem' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]: State or Province Name (full name) [Some-State]: Locality Name (eg, city) []: Organization Name (eg, company) [Internet Widgits Pty Ltd]: Organizational Unit Name (eg, section) []: Common Name (e.g. server FQDN or YOUR name) []:Mariadb client Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: Next, process client RSA key, enter: $galera-01 sudo openssl rsa -in client-key.pem -out client-key.pem Sample output: writing RSA key Finally, sign the client certificate, run: $galera-01 sudo openssl x509 -req -in client-req.pem -days 365000 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem Sample output: Signature ok subject=/C=AU/ST=Some-State/O=Internet Widgits Pty Ltd/CN=MariaDB client Getting CA Private Key Verify the certificates Type the following command to verify the certificates to make sure everything was created correctly: $galera-01 openssl verify -CAfile ca-cert.pem server-cert.pem client-cert.pem Sample output: server-cert.pem: OK client-cert.pem: OK Configure SSL for MariaDB Server Edit /etc/mysql/mariadb.conf.d/50-server.cnf and add the following lines in [mysqld] section: ssl-ca=/etc/mysql/certs/ca-cert.pem ssl-cert=/etc/mysql/certs/server-cert.pem ssl-key=/etc/mysql/certs/server-key.pem bind-address = * Give permission to mysql so it can read the certs properly: $galera-01 sudo chown -Rv mysql:root /etc/mysql/certs/ changed ownership of '/etc/mysql/certs/server-key.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/client-req.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/server-req.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/ca-key.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/server-cert.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/client-cert.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/ca-cert.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/client-key.pem' from root:root to mysql:root changed ownership of '/etc/mysql/certs/' from root:root to mysql:root Then, restart MariaDB service to apply the changes: $galera-01 sudo systemctl restart mysql Next, log in to MariaDB shell and check SSL variable: $galera-01 sudo mysql -u root -p Enter your root password, then run the following command: MariaDB [(none)]&amp;gt; SHOW VARIABLES LIKE '%ssl%'; You will see that SSL variables are now enabled: +---------------------+----------------------------------+ | Variable_name | Value | +---------------------+----------------------------------+ | have_openssl | NO | | have_ssl | YES | | ssl_ca | /etc/mysql/certs/ca-cert.pem | | ssl_capath | | | ssl_cert | /etc/mysql/certs/server-cert.pem | | ssl_cipher | | | ssl_crl | | | ssl_crlpath | | | ssl_key | /etc/mysql/certs/server-key.pem | | version_ssl_library | YaSSL 2.4.4 | +---------------------+----------------------------------+ 10 rows in set (0.001 sec) Configure SSL for MariaDB Client Edit /etc/mysql/mariadb.conf.d/50-client.cnf and add the following lines in [client] section: ssl-ca=/etc/mysql/certs/ca-cert.pem ssl-cert=/etc/mysql/certs/client-cert.pem ssl-key=/etc/mysql/certs/client-key.pem Verify Secure Connection Log in to MariaDB shell: $galera-01 sudo mysql -u root -p Now, check the status of connection with the following command: MariaDB [mysql]&amp;gt; status Detail about secure connection should be displayed like so: -------------- mysql Ver 15.1 Distrib 10.3.22-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2 Connection id: 282 Current database: Current user: root@localhost SSL: Cipher in use is DHE-RSA-AES256-SHA Current pager: stdout Using outfile: '' Using delimiter: ; Server: MariaDB Server version: 10.3.22-MariaDB-0+deb10u1 Debian 10 Protocol version: 10 Connection: Localhost via UNIX socket Server characterset: utf8mb4 Db characterset: utf8mb4 Client characterset: utf8mb4 Conn. characterset: utf8mb4 UNIX socket: /var/run/mysqld/mysqld.sock Uptime: 7 hours 27 min 20 sec Threads: 10 Questions: 31302 Slow queries: 0 Opens: 159 Flush tables: 1 Open tables: 63 Queries per second avg: 1.166 -------------- Conclusion This post guides us how to set up a MariaDB server and secure connection between the server and its clients. Next post will cover setting up the Galera cluster. Resources https://mariadb.com/kb/en/secure-connections-overview https://mariadb.com/kb/en/securing-connections-for-client-and-server [High Availability Series] PART II: Configure and Secure a 3-node Galera Cluster</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/galera_small.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/galera_small.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Setup Wireguard + Pi-hole on Debian 10 / Ubuntu 18.04</title><link href="https://jasonthai.me/blog/2020/05/01/how-to-setup-wireguard-pi-hole-on-debian-10-ubuntu-1804/" rel="alternate" type="text/html" title="How to Setup Wireguard + Pi-hole on Debian 10 / Ubuntu 18.04" /><published>2020-05-01T00:00:00+00:00</published><updated>2020-05-01T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/05/01/how-to-setup-wireguard-pi-hole-on-debian-10-ubuntu-1804</id><content type="html" xml:base="https://jasonthai.me/blog/2020/05/01/how-to-setup-wireguard-pi-hole-on-debian-10-ubuntu-1804/">&lt;blockquote&gt;
  &lt;p&gt;WireGuard® is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry.
&lt;a href=&quot;https://www.wireguard.com/&quot;&gt;https://www.wireguard.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Follow up for my post &lt;a href=&quot;https://jasonthai.me/blog/2019/08/25/how-to-host-openvpn-and-pi-hole-on-ubuntu-1804-vps/&quot;&gt;How to host OpenVPN and Pi-hole on Ubuntu 18.04 VPS&lt;/a&gt;. This is a guide to set up wireguard + pi-hole for your own private ad blocking VPN.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&quot;wireguard-setup&quot;&gt;Wireguard Setup&lt;/h3&gt;
&lt;p&gt;Run these scripts:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://git.io/wireguard &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; wireguard-install.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash wireguard-install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow this setup:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Welcome to this WireGuard road warrior installer!

I need to ask you a few questions before starting setup.
You can use the default options and just press enter &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you are ok with them.

What IPv4 address should the WireGuard server use?
     1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Your IPv4 address should show up here
     2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; other &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;IP
IPv4 address &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]: 1

What port &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;you want WireGuard listening to?
Port &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;51820]: 51820

Tell me a name &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the first client.
Client name &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;client]: client

Which DNS &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;you want to use &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this client?
   1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Current system resolvers
   2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1.1.1.1
   3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Google
   4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; OpenDNS
   5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NTT
   6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AdGuard
DNS &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]: 2

We are ready to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up your WireGuard server now.

Press any key to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;start-wireguard&quot;&gt;Start Wireguard&lt;/h3&gt;
&lt;p&gt;Wireguard should start automatically after you ran the script. If not you can check by&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status wg-quick@wg0.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart Wireguard services:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart wg-quick@wg0.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pi-hole-setup&quot;&gt;Pi-hole Setup&lt;/h3&gt;
&lt;p&gt;Note down  Wireguard’s IP:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip a show dev wg0
10.7.0.1/24 // note this address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note down your default  gateway IP address:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip r | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;default
default via XXX.XXX.XXX.XXX dev eth0 onlink // note this address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run this script:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://install.pi-hole.net | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow the instruction to set up pi-hole:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-1.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-1.png&quot; alt=&quot;step 1&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;The following step is important, make sure to select &lt;code class=&quot;highlighter-rouge&quot;&gt;wg0&lt;/code&gt; as the interface&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-2.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-2.png&quot; alt=&quot;step 2&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Choose the DNS provider Pi-hole will use.&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-3.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-3.png&quot; alt=&quot;step 3&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Choose the protocols available to you&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-4.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-4.png&quot; alt=&quot;step 4&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;This following step is important, make sure to choose &lt;code class=&quot;highlighter-rouge&quot;&gt;no&lt;/code&gt; so we can assign our internal address which is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.7.0.1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-5.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-5.png&quot; alt=&quot;step 5&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Enter &lt;code class=&quot;highlighter-rouge&quot;&gt;10.7.0.1/24&lt;/code&gt;. This is the static address VPN will use to talk to Pi-hole&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-6.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-6.png&quot; alt=&quot;step 6&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the ipv4-gateway you noted down&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pihole-wireguard-7.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pihole-wireguard-7.png&quot; alt=&quot;step 7&quot; /&gt;
&lt;/picture&gt;

&lt;ul&gt;
  &lt;li&gt;There are a few more steps but I just choose the default settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;test-dns-settings&quot;&gt;Test DNS settings&lt;/h3&gt;
&lt;p&gt;Run this script&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;host google.com 10.7.0.1

&lt;span class=&quot;c&quot;&gt;# Output from host google.com 10.7.0.1&lt;/span&gt;
google.com has address 172.217.0.46
google.com has IPv6 address 2607:f8b0:4005:80b::200e
google.com mail is handled by 10 aspmx.l.google.com.
google.com mail is handled by 20 alt1.aspmx.l.google.com.
google.com mail is handled by 30 alt2.aspmx.l.google.com.
google.com mail is handled by 40 alt3.aspmx.l.google.com.
google.com mail is handled by 50 alt4.aspmx.l.google.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our Wireguard + Pi-hole still see google.com’s public IPs properly&lt;/p&gt;

&lt;p&gt;This time run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;host pagead2.googlesyndication.com

&lt;span class=&quot;c&quot;&gt;# Output from host pagead2.googlesyndication.com&lt;/span&gt;
pagead2.googlesyndication.com has address 0.0.0.0
pagead2.googlesyndication.com has IPv6 address ::
pagead2.googlesyndication.com is an &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pagead46.l.doubleclick.net.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pi-hole blocked &lt;code class=&quot;highlighter-rouge&quot;&gt;pagead2.googlesyndication.com&lt;/code&gt; as the domain is in its blacklist.&lt;/p&gt;

&lt;h3 id=&quot;generate-wireguard-client-config-file&quot;&gt;Generate Wireguard Client Config File&lt;/h3&gt;
&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;bash wireguard-install.sh&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-wireguard-to-use-pi-hole-dns&quot;&gt;Configure Wireguard to use Pi-hole DNS&lt;/h3&gt;
&lt;p&gt;Edit your wireguard client conf file and update the DNS servers setting with Pi-hole internal address. In my case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.7.0.1&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;test-from-browser&quot;&gt;Test From Browser&lt;/h3&gt;
&lt;p&gt;After connecting to your VPN using Wireguard client. Go to this address &lt;a href=&quot;http://pagead2.googlesyndication.com&quot;&gt;http://pagead2.googlesyndication.com&lt;/a&gt;, if everything works correctly you will see this:&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/google-syndication.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/google-syndication.png&quot; alt=&quot;google syndication&quot; /&gt;
&lt;/picture&gt;

&lt;h3 id=&quot;pi-hole-statistics&quot;&gt;Pi-hole Statistics&lt;/h3&gt;
&lt;p&gt;You can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://pi.hole/admin&lt;/code&gt; once you are connected to the VPN and see some of Pi-hole’s stats. The result is mind-boggling. Almost half of my traffic is to serve ads.&lt;/p&gt;

&lt;picture&gt;
    &lt;source srcset=&quot;https://cdn.jasonthai.me/assets/img/pi-hole-stats.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img class=&quot;db ml-auto mr-auto&quot; src=&quot;https://cdn.jasonthai.me/https://jasonthai.me/assets/img/pi-hole-stats.png&quot; alt=&quot;Pi-hole stats&quot; /&gt;
&lt;/picture&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pi-hole is a good solution to fight against ads on the internet. You should give it a try. That said not all ads are bad. Some creators are reliant on ads as their source of income. If you have someone you support, consider whitelisting the ads for the good cause.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Nyr/wireguard-install&quot;&gt;https://github.com/Nyr/wireguard-install&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pi-hole.net/&quot;&gt;https://pi-hole.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">WireGuard® is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry. https://www.wireguard.com Introduction Follow up for my post How to host OpenVPN and Pi-hole on Ubuntu 18.04 VPS. This is a guide to set up wireguard + pi-hole for your own private ad blocking VPN. Installation Wireguard Setup Run these scripts: wget https://git.io/wireguard -O wireguard-install.sh &amp;amp;&amp;amp; bash wireguard-install.sh Follow this setup: Welcome to this WireGuard road warrior installer! I need to ask you a few questions before starting setup. You can use the default options and just press enter if you are ok with them. What IPv4 address should the WireGuard server use? 1) Your IPv4 address should show up here 2) other local IP IPv4 address [1]: 1 What port do you want WireGuard listening to? Port [51820]: 51820 Tell me a name for the first client. Client name [client]: client Which DNS do you want to use for this client? 1) Current system resolvers 2) 1.1.1.1 3) Google 4) OpenDNS 5) NTT 6) AdGuard DNS [1]: 2 We are ready to set up your WireGuard server now. Press any key to continue... Start Wireguard Wireguard should start automatically after you ran the script. If not you can check by systemctl status wg-quick@wg0.service Restart Wireguard services: systemctl restart wg-quick@wg0.service Pi-hole Setup Note down Wireguard’s IP: ip a show dev wg0 10.7.0.1/24 // note this address Note down your default gateway IP address: ip r | grep default default via XXX.XXX.XXX.XXX dev eth0 onlink // note this address Run this script: curl -sSL https://install.pi-hole.net | bash Follow the instruction to set up pi-hole: Installing dependencies The following step is important, make sure to select wg0 as the interface Choose the DNS provider Pi-hole will use. Choose the protocols available to you This following step is important, make sure to choose no so we can assign our internal address which is 10.7.0.1. Enter 10.7.0.1/24. This is the static address VPN will use to talk to Pi-hole Enter the ipv4-gateway you noted down There are a few more steps but I just choose the default settings. Test DNS settings Run this script host google.com 10.7.0.1 # Output from host google.com 10.7.0.1 google.com has address 172.217.0.46 google.com has IPv6 address 2607:f8b0:4005:80b::200e google.com mail is handled by 10 aspmx.l.google.com. google.com mail is handled by 20 alt1.aspmx.l.google.com. google.com mail is handled by 30 alt2.aspmx.l.google.com. google.com mail is handled by 40 alt3.aspmx.l.google.com. google.com mail is handled by 50 alt4.aspmx.l.google.com. Our Wireguard + Pi-hole still see google.com’s public IPs properly This time run host pagead2.googlesyndication.com # Output from host pagead2.googlesyndication.com pagead2.googlesyndication.com has address 0.0.0.0 pagead2.googlesyndication.com has IPv6 address :: pagead2.googlesyndication.com is an alias for pagead46.l.doubleclick.net. Pi-hole blocked pagead2.googlesyndication.com as the domain is in its blacklist. Generate Wireguard Client Config File Run bash wireguard-install.sh Configure Wireguard to use Pi-hole DNS Edit your wireguard client conf file and update the DNS servers setting with Pi-hole internal address. In my case it is 10.7.0.1 Test From Browser After connecting to your VPN using Wireguard client. Go to this address http://pagead2.googlesyndication.com, if everything works correctly you will see this: Pi-hole Statistics You can go to http://pi.hole/admin once you are connected to the VPN and see some of Pi-hole’s stats. The result is mind-boggling. Almost half of my traffic is to serve ads. Conclusion Pi-hole is a good solution to fight against ads on the internet. You should give it a try. That said not all ads are bad. Some creators are reliant on ads as their source of income. If you have someone you support, consider whitelisting the ads for the good cause. References https://github.com/Nyr/wireguard-install https://pi-hole.net/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/openvpn-pihole.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/openvpn-pihole.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Donate Compute Power to Folding@Home to Find Cures For Covid-19</title><link href="https://jasonthai.me/blog/2020/03/14/donate-compute-power-to-foldinghome-to-cures-for-covid-19/" rel="alternate" type="text/html" title="Donate Compute Power to Folding@Home to Find Cures For Covid-19" /><published>2020-03-14T00:00:00+00:00</published><updated>2020-03-14T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/03/14/donate-compute-power-to-foldinghome-to-cures-for-covid-19</id><content type="html" xml:base="https://jasonthai.me/blog/2020/03/14/donate-compute-power-to-foldinghome-to-cures-for-covid-19/">&lt;p&gt;If you have not heard of Folding@Home, it is basically a software you can download to your computer and uses part of the computer power to help scientists run models and find cures for various diseases.&lt;/p&gt;

&lt;p&gt;I suggest you take a look at their website to learn more: &lt;a href=&quot;https://foldingathome.org/&quot;&gt;https://foldingathome.org/&lt;/a&gt;. Currently they are looking for more compute power to combat against Covid-19(20). Please help out however you can.&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="blog" /><category term="en" /><summary type="html">If you have not heard of Folding@Home, it is basically a software you can download to your computer and uses part of the computer power to help scientists run models and find cures for various diseases. I suggest you take a look at their website to learn more: https://foldingathome.org/. Currently they are looking for more compute power to combat against Covid-19(20). Please help out however you can.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/foldingathome.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/foldingathome.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Some Notes on Apache Spark Memory Management</title><link href="https://jasonthai.me/blog/2020/02/27/some-notes-on-apache-spark-memory-management/" rel="alternate" type="text/html" title="Some Notes on Apache Spark Memory Management" /><published>2020-02-27T00:00:00+00:00</published><updated>2020-02-27T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/02/27/some-notes-on-apache-spark-memory-management</id><content type="html" xml:base="https://jasonthai.me/blog/2020/02/27/some-notes-on-apache-spark-memory-management/">&lt;h2 id=&quot;important-configurations&quot;&gt;Important configurations:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.memory&lt;/span&gt; – Size of memory to use for each executor that runs the task.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.cores&lt;/span&gt; – Number of virtual cores.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.memory&lt;/span&gt; – Size of memory to use for the driver.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.cores&lt;/span&gt; – Number of virtual cores to use for the driver.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.instances&lt;/span&gt; – Number of executors. Set this parameter unless spark.dynamicAllocation.enabled is set to true.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.default.parallelism&lt;/span&gt; – Default number of partitions in resilient distributed datasets (RDDs) returned by transformations like join, reduceByKey, and parallelize when no partition number is set by the user&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.sql.execution.arrow.enabled&lt;/span&gt; - Enable optimization for panda dataframe&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.files.ignoreCorruptFiles&lt;/span&gt; - Ignore corrupt files&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.sql.files.ignoreCorruptFiles&lt;/span&gt; - Ignore corrupt files&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.extraJavaOptions&lt;/span&gt; - Other Java options like garbage collection for executors&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.extraJavaOptions&lt;/span&gt; - Other Java options like garbage collection for drivers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sample-calculations&quot;&gt;Sample Calculations:&lt;/h2&gt;

&lt;p&gt;Consider an EMR cluster with 1 master - 25 slaves running c5.18xlarge instance. Each instance comes with 72vCPU, 144 GiB Memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.cores&lt;/span&gt; = number of virtual cores per executor. Recommendation is 5
    &lt;blockquote&gt;
      &lt;p&gt;spark.excutor.cores = 5&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Number of executors per instance = (total number of virtual cores per instance - 1)/ spark.executors.cores&lt;br /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Number of executors per instance = (72 - 1) / 5 = 14&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Total executor memory = total RAM per instance / number of executors per instance&lt;br /&gt;&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Total executor memory = 144 / 14 = 10 (round down)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executors.memory&lt;/span&gt; = total executor memory * 0.9&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;spark.executors.memory = 10 * 0.9 = 9g&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.memoryOverhead&lt;/span&gt; = total executor memory * 0.10
    &lt;blockquote&gt;
      &lt;p&gt;spark.excutor.memoryOverhead = 10 * 0.1 = 1g&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.memory&lt;/span&gt; = spark.executors.memory
    &lt;blockquote&gt;
      &lt;p&gt;spark.driver.memory = 9g&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.cores&lt;/span&gt;= spark.executors.cores
    &lt;blockquote&gt;
      &lt;p&gt;spark.driver.cores = 5&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.instances&lt;/span&gt; = (number of executors per instance * number of core instances) minus 1 for the driver
    &lt;blockquote&gt;
      &lt;p&gt;spark.executor.instances = 14 * 25 - 1 = 349&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.default.parallelism&lt;/span&gt; = spark.executor.instances * spark.executors.cores * 2
    &lt;blockquote&gt;
      &lt;p&gt;spark.default.parallelism = 349 * 5 * 2 = 3490&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.executor.extraJavaOptions&lt;/span&gt;
    &lt;blockquote&gt;
      &lt;p&gt;spark.executor.extraJavaOptions = -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -XX:InitiatingHeapOccupancyPercent=35 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:OnOutOfMemoryError=’kill -9 %p’&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color: darkred&quot;&gt;spark.driver.extraJavaOptions&lt;/span&gt;
    &lt;blockquote&gt;
      &lt;p&gt;spark.executor.extraJavaOptions = -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -XX:InitiatingHeapOccupancyPercent=35 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:OnOutOfMemoryError=’kill -9 %p’&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/big-data/best-practices-for-successfully-managing-memory-for-apache-spark-applications-on-amazon-emr/&quot;&gt;https://aws.amazon.com/blogs/big-data/best-practices-for-successfully-managing-memory-for-apache-spark-applications-on-amazon-emr/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/latest/sql-pyspark-pandas-with-arrow.html&quot;&gt;https://spark.apache.org/docs/latest/sql-pyspark-pandas-with-arrow.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Important configurations: spark.executor.memory – Size of memory to use for each executor that runs the task. spark.executor.cores – Number of virtual cores. spark.driver.memory – Size of memory to use for the driver. spark.driver.cores – Number of virtual cores to use for the driver. spark.executor.instances – Number of executors. Set this parameter unless spark.dynamicAllocation.enabled is set to true. spark.default.parallelism – Default number of partitions in resilient distributed datasets (RDDs) returned by transformations like join, reduceByKey, and parallelize when no partition number is set by the user spark.sql.execution.arrow.enabled - Enable optimization for panda dataframe spark.files.ignoreCorruptFiles - Ignore corrupt files spark.sql.files.ignoreCorruptFiles - Ignore corrupt files spark.executor.extraJavaOptions - Other Java options like garbage collection for executors spark.driver.extraJavaOptions - Other Java options like garbage collection for drivers Sample Calculations: Consider an EMR cluster with 1 master - 25 slaves running c5.18xlarge instance. Each instance comes with 72vCPU, 144 GiB Memory. spark.executor.cores = number of virtual cores per executor. Recommendation is 5 spark.excutor.cores = 5 Number of executors per instance = (total number of virtual cores per instance - 1)/ spark.executors.cores Number of executors per instance = (72 - 1) / 5 = 14 Total executor memory = total RAM per instance / number of executors per instance Total executor memory = 144 / 14 = 10 (round down) spark.executors.memory = total executor memory * 0.9 spark.executors.memory = 10 * 0.9 = 9g spark.executor.memoryOverhead = total executor memory * 0.10 spark.excutor.memoryOverhead = 10 * 0.1 = 1g spark.driver.memory = spark.executors.memory spark.driver.memory = 9g spark.driver.cores= spark.executors.cores spark.driver.cores = 5 spark.executor.instances = (number of executors per instance * number of core instances) minus 1 for the driver spark.executor.instances = 14 * 25 - 1 = 349 spark.default.parallelism = spark.executor.instances * spark.executors.cores * 2 spark.default.parallelism = 349 * 5 * 2 = 3490 spark.executor.extraJavaOptions spark.executor.extraJavaOptions = -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -XX:InitiatingHeapOccupancyPercent=35 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:OnOutOfMemoryError=’kill -9 %p’ spark.driver.extraJavaOptions spark.executor.extraJavaOptions = -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -XX:InitiatingHeapOccupancyPercent=35 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:OnOutOfMemoryError=’kill -9 %p’ Sources: https://aws.amazon.com/blogs/big-data/best-practices-for-successfully-managing-memory-for-apache-spark-applications-on-amazon-emr/ https://spark.apache.org/docs/latest/sql-pyspark-pandas-with-arrow.html</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/spark.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/spark.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Better SSH Keys Management with AuthorizedKeysCommand</title><link href="https://jasonthai.me/blog/2020/02/19/better-ssh-keys-management-with-authorizedkeyscommand/" rel="alternate" type="text/html" title="Better SSH Keys Management with AuthorizedKeysCommand" /><published>2020-02-19T00:00:00+00:00</published><updated>2020-02-19T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/02/19/better-ssh-keys-management-with-authorizedkeyscommand</id><content type="html" xml:base="https://jasonthai.me/blog/2020/02/19/better-ssh-keys-management-with-authorizedkeyscommand/">&lt;p&gt;I usually use authorized_key files to store SSH public keys in order to access my servers . However once I start to have multiple servers, I realize manually managing SSH keys is nightmare.&lt;/p&gt;

&lt;p&gt;Recently I found out a better way to manage these SSH keys
In /etc/ssh/sshd_config file there are 2 configurations:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AuthorizedKeysCommand /keys.sh
AuthorizedKeysCommandUser nobody
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use &lt;strong&gt;AuthorizedKeysCommand&lt;/strong&gt; to point to an script that returns all the SSH keys. In this case, my script is:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
curl https://raw.githubusercontent.com/jasontthai/keys/master/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Name this file &lt;code class=&quot;highlighter-rouge&quot;&gt;key.sh&lt;/code&gt; and make it executable: &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x /keys.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The public keys are stored in a Github repo which can be updated any time. The structure of the repo is this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keys/
├── user1
├── user2
├── user3
└── user4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I login with  user1, the server will get user1’s public keys from Github and validates it agaisnt user1’s private key.&lt;/p&gt;

&lt;p&gt;There are a few problems with this approach:  I rely on an external service to retrieve the public keys. If Github goes offline, I will be unable to login to my servers at all. This also adds latency to the login step as we need to retrieve the keys over the internet. So I should think about some caching mechanism in case this happens.&lt;/p&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">I usually use authorized_key files to store SSH public keys in order to access my servers . However once I start to have multiple servers, I realize manually managing SSH keys is nightmare. Recently I found out a better way to manage these SSH keys In /etc/ssh/sshd_config file there are 2 configurations: AuthorizedKeysCommand /keys.sh AuthorizedKeysCommandUser nobody We can use AuthorizedKeysCommand to point to an script that returns all the SSH keys. In this case, my script is: #!/bin/bash curl https://raw.githubusercontent.com/jasontthai/keys/master/$1 Name this file key.sh and make it executable: chmod a+x /keys.sh The public keys are stored in a Github repo which can be updated any time. The structure of the repo is this: keys/ ├── user1 ├── user2 ├── user3 └── user4 When I login with user1, the server will get user1’s public keys from Github and validates it agaisnt user1’s private key. There are a few problems with this approach: I rely on an external service to retrieve the public keys. If Github goes offline, I will be unable to login to my servers at all. This also adds latency to the login step as we need to retrieve the keys over the internet. So I should think about some caching mechanism in case this happens.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/ssh.jpg" /><media:content medium="image" url="https://jasonthai.me/assets/img/ssh.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setup Shell Script for Linux-based Servers</title><link href="https://jasonthai.me/blog/2020/02/12/setup-shell-script-for-linux-based-servers/" rel="alternate" type="text/html" title="Setup Shell Script for Linux-based Servers" /><published>2020-02-12T00:00:00+00:00</published><updated>2020-02-12T00:00:00+00:00</updated><id>https://jasonthai.me/blog/2020/02/12/setup-shell-script-for-linux-based-servers</id><content type="html" xml:base="https://jasonthai.me/blog/2020/02/12/setup-shell-script-for-linux-based-servers/">&lt;p&gt;Since I have a few Linux servers that are running RHEL, Debian or Ubuntu OS, I want to have an automatic and convenient way to quickly set up and get them running.  Specifically I want to do a the following things for a fresh server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade the server’s packages to the latest version&lt;/li&gt;
  &lt;li&gt;Install essential packages such as: fail2ban, ufw, htop, apache2, docker, etc.&lt;/li&gt;
  &lt;li&gt;Create new user with sudo access&lt;/li&gt;
  &lt;li&gt;Disable root login and password authentication in favor of SSH keys&lt;/li&gt;
  &lt;li&gt;Ability to install other packages if required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind, I created a simple setup script which you can find here: &lt;a href=&quot;https://github.com/jasontthai/shell-scripts&quot;&gt;https://github.com/jasontthai/shell-scripts&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-the-script&quot;&gt;Running the Script&lt;/h3&gt;
&lt;p&gt;To run the script manually with prompt so you can decide what the script does:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -L json.id/setup.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To run the script in automatic mode without prompt except for adding new user:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -L json.id/setup.sh | sudo bash -s -- -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-of-output&quot;&gt;Example of output&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; json.id/setup.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;span class=&quot;c&quot;&gt;# ## ## ## ## ## ## ## ## ## ## ## ## #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#           VPS Setup Script          #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ## ## ## ## ## ## ## ## ## ## ## ## #&lt;/span&gt;

Wed 12 Feb 2020 03:56:01 PM PST
Updating system...

Installing Basic Packages: &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ufw fail2ban htop curl apache2

Add Sudo User? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: y
Disable Root Login? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: y
Disable Password Authentication? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: y
Install Docker? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: y
Install Docker Compose? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: y
Enter your TIMEZONE &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Empty to skip]:
Enter any other packages to be installed &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Empty to skip]:

Setting &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;user...
Username: testuser
Password:

Adding SSH Keys
Enter SSH Key &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Empty to skip]:

Disabling Root Login...

Disabling Password Authentication...

Docker Installed. Added testuser to docker group

Docker Compose Installed.

Finished setup script.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or to view help&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; json.id/setup.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ## ## ## ## ## ## ## ## ## ## ## ## #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#           VPS Setup Script          #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ## ## ## ## ## ## ## ## ## ## ## ## #&lt;/span&gt;

Wed 12 Feb 2020 04:04:07 PM PST

Usage: ./setup.sh &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
       curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; json.id/setup.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
       curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; json.id/setup.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ah&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

Flags:
       &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; : run setup script automatically
       &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; : prints this lovely message, &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;exits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jason Thai</name></author><category term="tech" /><category term="en" /><summary type="html">Since I have a few Linux servers that are running RHEL, Debian or Ubuntu OS, I want to have an automatic and convenient way to quickly set up and get them running. Specifically I want to do a the following things for a fresh server: Upgrade the server’s packages to the latest version Install essential packages such as: fail2ban, ufw, htop, apache2, docker, etc. Create new user with sudo access Disable root login and password authentication in favor of SSH keys Ability to install other packages if required With that in mind, I created a simple setup script which you can find here: https://github.com/jasontthai/shell-scripts Running the Script To run the script manually with prompt so you can decide what the script does: curl -L json.id/setup.sh | sudo bash To run the script in automatic mode without prompt except for adding new user: curl -L json.id/setup.sh | sudo bash -s -- -a Example of output curl -sL json.id/setup.sh | sudo bash # ## ## ## ## ## ## ## ## ## ## ## ## # # VPS Setup Script # # ## ## ## ## ## ## ## ## ## ## ## ## # Wed 12 Feb 2020 03:56:01 PM PST Updating system... Installing Basic Packages: sudo ufw fail2ban htop curl apache2 Add Sudo User? [y/N]: y Disable Root Login? [y/N]: y Disable Password Authentication? [y/N]: y Install Docker? [y/N]: y Install Docker Compose? [y/N]: y Enter your TIMEZONE [Empty to skip]: Enter any other packages to be installed [Empty to skip]: Setting sudo user... Username: testuser Password: Adding SSH Keys Enter SSH Key [Empty to skip]: Disabling Root Login... Disabling Password Authentication... Docker Installed. Added testuser to docker group Docker Compose Installed. Finished setup script. or to view help curl -sL json.id/setup.sh | sudo bash -s -- -h # ## ## ## ## ## ## ## ## ## ## ## ## # # VPS Setup Script # # ## ## ## ## ## ## ## ## ## ## ## ## # Wed 12 Feb 2020 04:04:07 PM PST Usage: ./setup.sh [-mh] curl -sL json.id/setup.sh | sudo bash curl -sL json.id/setup.sh | sudo bash -s --{ah} Flags: -a : run setup script automatically -h : prints this lovely message, then exits</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jasonthai.me/assets/img/scripts.png" /><media:content medium="image" url="https://jasonthai.me/assets/img/scripts.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>